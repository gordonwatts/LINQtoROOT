using LINQToTTreeLib.Variables;
using LinqToTTreeInterfacesLib;
using ROOTNET;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
using LINQToTTreeLib.Statements;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib
{
    public partial class GeneratedCodeTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException531()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 0);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    this.SetResult(generatedCode, (IVariable)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException654()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 0);
    string[] ss = new string[1];
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, ss);
    this.SetResult(generatedCode, (IVariable)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException95()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 1);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    this.SetResult(generatedCode, (IVariable)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException243()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 0);
    string[] ss = new string[1];
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    this.SetResult(generatedCode, (IVariable)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException807()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 0);
    string[] ss = new string[1];
    ss[0] = "";
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    this.SetResult(generatedCode, (IVariable)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException544()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      varInteger = VarIntegerFactory.Create(false, 0);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      NTObject[] nTObjects = new NTObject[1];
      nTObjects[0] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, (string[])null);
      this.SetResult(generatedCode, (IVariable)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException502()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    generatedCode = GeneratedCodeFactory.Create((IVariable)varInteger, iStatements, 
                                                (string[])null, (NTObject[])null, (string[])null);
    this.SetResult(generatedCode, (IVariable)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
public void SetResult164()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    this.SetResult(generatedCode, (IVariable)varInteger);
    Assert.IsNotNull((object)generatedCode);
    Assert.AreEqual<int>(1, generatedCode.Depth);
    Assert.IsNotNull(generatedCode.ResultValue);
    Assert.IsNotNull(generatedCode.CodeBody);
    Assert.IsNotNull(generatedCode.VariablesToTransfer);
    Assert.IsNotNull(generatedCode.IncludeFiles);
    Assert.IsNotNull(generatedCode.ReferencedLeafNames);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException718()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    string[] ss = new string[2];
    ss[0] = "";
    ss[1] = "";
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    this.SetResult(generatedCode, (IVariable)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException704()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      NTObject[] nTObjects = new NTObject[2];
      nTObjects[0] = nTObject;
      nTObjects[1] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, (string[])null);
      this.SetResult(generatedCode, (IVariable)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException419()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      VarInteger varInteger;
      NTObject nTObject;
      NTObject nTObject1;
      NTObject nTObject2;
      GeneratedCode generatedCode;
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      nTObject1 = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject1);
      nTObject2 = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject2);
      NTObject[] nTObjects = new NTObject[4];
      nTObjects[0] = nTObject;
      nTObjects[1] = nTObject1;
      nTObjects[2] = nTObject1;
      nTObjects[3] = nTObject2;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, (string[])null);
      this.SetResult(generatedCode, (IVariable)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException208()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementIfOnCount statementIfOnCount;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    IStatement[] iStatements = new IStatement[2];
    iStatements[0] = (IStatement)statementIncrementInteger;
    iStatements[1] = (IStatement)statementIfOnCount;
    generatedCode = GeneratedCodeFactory.Create((IVariable)varInteger, iStatements, 
                                                (string[])null, (NTObject[])null, (string[])null);
    this.SetResult(generatedCode, (IVariable)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void SetResultThrowsArgumentNullException92()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementIfOnCount statementIfOnCount;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    IStatement[] iStatements = new IStatement[2];
    iStatements[0] = (IStatement)statementIncrementInteger;
    iStatements[1] = (IStatement)statementIfOnCount;
    generatedCode = GeneratedCodeFactory.Create((IVariable)varInteger, iStatements, 
                                                (string[])null, (NTObject[])null, (string[])null);
    this.SetResult(generatedCode, (IVariable)null);
}
    }
}
