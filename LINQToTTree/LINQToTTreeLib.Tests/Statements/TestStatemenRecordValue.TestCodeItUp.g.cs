// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using LINQToTTreeLib.Statements;
using LINQToTTreeLib.Variables;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace LINQToTTreeLib.Tests
{
    public partial class TestStatemenRecordValue
    {
[TestMethod]
[PexGeneratedBy(typeof(TestStatemenRecordValue))]
public void TestCodeItUp613()
{
    VarInteger varInteger;
    StatementRecordValue statementRecordValue;
    string[] ss;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementRecordValue = StatementRecordValueFactory.Create
                               ((IVariable)varInteger, (IValue)varInteger, (IVariable)varInteger, false);
    ss = this.TestCodeItUp(statementRecordValue);
    Assert.IsNotNull((object)ss);
    Assert.AreEqual<int>(2, ss.Length);
    Assert.AreEqual<string>("anint_1 = anint_1;", ss[0]);
    Assert.AreEqual<string>("anint_1 = true;", ss[1]);
    Assert.IsNotNull((object)statementRecordValue);
    Assert.IsNull(statementRecordValue.Parent);
}
[TestMethod]
[PexGeneratedBy(typeof(TestStatemenRecordValue))]
public void TestCodeItUp547()
{
    VarInteger varInteger;
    StatementRecordValue statementRecordValue;
    string[] ss;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementRecordValue =
      StatementRecordValueFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                         (IVariable)varInteger, PexSafeHelpers.ByteToBoolean((byte)16));
    ss = this.TestCodeItUp(statementRecordValue);
    Assert.IsNotNull((object)ss);
    Assert.AreEqual<int>(3, ss.Length);
    Assert.AreEqual<string>("anint_1 = anint_1;", ss[0]);
    Assert.AreEqual<string>("anint_1 = true;", ss[1]);
    Assert.AreEqual<string>("break;", ss[2]);
    Assert.IsNotNull((object)statementRecordValue);
    Assert.IsNull(statementRecordValue.Parent);
}
[TestMethod]
[PexGeneratedBy(typeof(TestStatemenRecordValue))]
public void TestCodeItUp61301()
{
    VarInteger varInteger;
    StatementRecordValue statementRecordValue;
    string[] ss;
    varInteger = VarIntegerFactory.Create(false, 114);
    statementRecordValue = StatementRecordValueFactory.Create
                               ((IVariable)varInteger, (IValue)varInteger, (IVariable)varInteger, false);
    ss = this.TestCodeItUp(statementRecordValue);
    Assert.IsNotNull((object)ss);
    Assert.AreEqual<int>(2, ss.Length);
    Assert.AreEqual<string>("anint_1 = anint_1;", ss[0]);
    Assert.AreEqual<string>("anint_1 = true;", ss[1]);
    Assert.IsNotNull((object)statementRecordValue);
    Assert.IsNull(statementRecordValue.Parent);
}
    }
}
