// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using LinqToTTreeInterfacesLib;
using LINQToTTreeLib.Statements;
using LINQToTTreeLib.Variables;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace LINQToTTreeLib.Tests.Statements
{
    public partial class StatementLoopOverGoodTest
    {
        [TestMethod]
        [PexGeneratedBy(typeof(StatementLoopOverGoodTest))]
        [ExpectedException(typeof(ArgumentNullException))]
        public void TestEquivThrowsArgumentNullException1()
        {
            VarInteger varInteger;
            StatementLoopOverGood statementLoopOverGood;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementLoopOverGood =
              StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger,
                                                  (IValue)varInteger, (IStatement[])null, (IVariable[])null);
            this.TestEquiv(statementLoopOverGood, (IStatement)null);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementLoopOverGoodTest))]
        [ExpectedException(typeof(ArgumentNullException))]
        public void TestEquivThrowsArgumentNullException963()
        {
            VarInteger varInteger;
            StatementLoopOverGood statementLoopOverGood;
            varInteger = VarIntegerFactory.Create(false, 0);
            IVariable[] iVariables = new IVariable[1];
            iVariables[0] = (IVariable)varInteger;
            statementLoopOverGood =
              StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger,
                                                  (IValue)varInteger, (IStatement[])null, iVariables);
            this.TestEquiv(statementLoopOverGood, (IStatement)null);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementLoopOverGoodTest))]
        public void TestEquiv33()
        {
            VarInteger varInteger;
            StatementLoopOverGood statementLoopOverGood;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementLoopOverGood =
              StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger,
                                                  (IValue)varInteger, (IStatement[])null, (IVariable[])null);
            this.TestEquiv(statementLoopOverGood, (IStatement)statementLoopOverGood);
            Assert.IsNotNull((object)statementLoopOverGood);
            Assert.IsNotNull(((StatementInlineBlockBase)statementLoopOverGood).Statements);
            Assert.IsNotNull
                (((StatementInlineBlockBase)statementLoopOverGood).DeclaredVariables);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementLoopOverGoodTest))]
        public void TestEquiv22()
        {
            VarInteger varInteger;
            StatementLoopOverGood statementLoopOverGood;
            StatementIncrementInteger statementIncrementInteger;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementLoopOverGood =
              StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger,
                                                  (IValue)varInteger, (IStatement[])null, (IVariable[])null);
            statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
            this.TestEquiv(statementLoopOverGood, (IStatement)statementIncrementInteger);
            Assert.IsNotNull((object)statementLoopOverGood);
            Assert.IsNotNull(((StatementInlineBlockBase)statementLoopOverGood).Statements);
            Assert.IsNotNull
                (((StatementInlineBlockBase)statementLoopOverGood).DeclaredVariables);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementLoopOverGoodTest))]
        [ExpectedException(typeof(ArgumentNullException))]
        public void TestEquivThrowsArgumentNullException221()
        {
            VarInteger varInteger;
            StatementIncrementInteger statementIncrementInteger;
            StatementLoopOverGood statementLoopOverGood;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
            IStatement[] iStatements = new IStatement[1];
            iStatements[0] = (IStatement)statementIncrementInteger;
            statementLoopOverGood =
              StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger,
                                                  (IValue)varInteger, iStatements, (IVariable[])null);
            this.TestEquiv(statementLoopOverGood, (IStatement)null);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementLoopOverGoodTest))]
        public void TestEquiv3304()
        {
            VarInteger varInteger;
            StatementLoopOverGood statementLoopOverGood;
            varInteger = VarIntegerFactory.Create(false, int.MaxValue);
            IVariable[] iVariables = new IVariable[1];
            iVariables[0] = (IVariable)varInteger;
            statementLoopOverGood =
              StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger,
                                                  (IValue)varInteger, (IStatement[])null, iVariables);
            this.TestEquiv(statementLoopOverGood, (IStatement)statementLoopOverGood);
            Assert.IsNotNull((object)statementLoopOverGood);
            Assert.IsNotNull(((StatementInlineBlockBase)statementLoopOverGood).Statements);
            Assert.IsNotNull
                (((StatementInlineBlockBase)statementLoopOverGood).DeclaredVariables);
        }
[TestMethod]
[PexGeneratedBy(typeof(StatementLoopOverGoodTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException556()
{
    VarInteger varInteger;
    StatementLoopOverGood statementLoopOverGood;
    varInteger = VarIntegerFactory.Create(false, 1);
    statementLoopOverGood =
      StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                          (IValue)varInteger, (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementLoopOverGood, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementLoopOverGoodTest))]
public void TestEquiv2203()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementLoopOverGood statementLoopOverGood;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[2];
    iStatements[0] = (IStatement)statementIncrementInteger;
    iStatements[1] = (IStatement)statementIncrementInteger;
    statementLoopOverGood =
      StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                          (IValue)varInteger, iStatements, (IVariable[])null);
    this.TestEquiv(statementLoopOverGood, (IStatement)statementIncrementInteger);
    Assert.IsNotNull((object)statementLoopOverGood);
    Assert.IsNotNull(((StatementInlineBlockBase)statementLoopOverGood).Statements);
    Assert.IsNotNull
        (((StatementInlineBlockBase)statementLoopOverGood).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementLoopOverGoodTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException623()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    VarInteger varInteger2;
    VarInteger varInteger3;
    VarInteger varInteger4;
    StatementLoopOverGood statementLoopOverGood;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    varInteger2 = VarIntegerFactory.Create(false, 0);
    varInteger3 = VarIntegerFactory.Create(false, 0);
    varInteger4 = VarIntegerFactory.Create(false, 0);
    IVariable[] iVariables = new IVariable[3];
    iVariables[0] = (IVariable)varInteger4;
    iVariables[1] = (IVariable)varInteger2;
    iVariables[2] = (IVariable)varInteger3;
    statementLoopOverGood =
      StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger2, 
                                          (IValue)varInteger1, (IStatement[])null, iVariables);
    this.TestEquiv(statementLoopOverGood, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementLoopOverGoodTest))]
public void TestEquiv3303()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    VarInteger varInteger2;
    VarInteger varInteger3;
    VarInteger varInteger4;
    StatementLoopOverGood statementLoopOverGood;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    varInteger2 = VarIntegerFactory.Create(false, 0);
    varInteger3 = VarIntegerFactory.Create(false, 0);
    varInteger4 = VarIntegerFactory.Create(PexSafeHelpers.ByteToBoolean((byte)8), 0);
    IVariable[] iVariables = new IVariable[3];
    iVariables[0] = (IVariable)varInteger4;
    iVariables[1] = (IVariable)varInteger1;
    iVariables[2] = (IVariable)varInteger3;
    statementLoopOverGood =
      StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger2, 
                                          (IValue)varInteger1, (IStatement[])null, iVariables);
    this.TestEquiv(statementLoopOverGood, (IStatement)statementLoopOverGood);
    Assert.IsNotNull((object)statementLoopOverGood);
    Assert.IsNotNull(((StatementInlineBlockBase)statementLoopOverGood).Statements);
    Assert.IsNotNull
        (((StatementInlineBlockBase)statementLoopOverGood).DeclaredVariables);
}
    }
}
