// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using LINQToTTreeLib.Variables;
using LINQToTTreeLib.Statements;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace LINQToTTreeLib.Tests
{
    public partial class StatementAssignTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
[PexRaisedException(typeof(AssertFailedException))]
public void CodeItUpTestThrowsAssertFailedException15()
{
    VarInteger varInteger;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
    s = this.CodeItUpTest(statementAssign);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest202()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, 0);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("anint_14=anint_15;", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest707()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 1);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("anint_22=anint_23;", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void CodeItUpTestThrowsIndexOutOfRangeException202()
{
    VarInteger varInteger;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
    s = this.CodeItUpTest(statementAssign);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest465()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, 0);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("anint_13=anint_14;", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest676()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 1);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("anint_18=anint_19;", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void CodeItUpTestThrowsIndexOutOfRangeException495()
{
    VarInteger varInteger;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
    s = this.CodeItUpTest(statementAssign);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest46501()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, 0);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("anint_13=anint_14;", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest67601()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 1);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("anint_18=anint_19;", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest482()
{
    VarInteger varInteger;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
    Assert.IsTrue(object.ReferenceEquals
                      (statementAssign.Expression, statementAssign.ResultVariable));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest680()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, 0);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("anint_10=anint_11;", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest967()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 1);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("anint_15=anint_16;", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest48201()
{
    VarInteger varInteger;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
    Assert.IsTrue(object.ReferenceEquals
                      (statementAssign.Expression, statementAssign.ResultVariable));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest68001()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, 0);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("anint_10=anint_11;", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementAssignTest))]
public void CodeItUpTest96701()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    string s;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 1);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    s = this.CodeItUpTest(statementAssign);
    Assert.AreEqual<string>("anint_15=anint_16;", s);
    Assert.IsNotNull((object)statementAssign);
    Assert.IsNotNull(statementAssign.ResultVariable);
    Assert.IsNotNull(statementAssign.Expression);
}
    }
}
