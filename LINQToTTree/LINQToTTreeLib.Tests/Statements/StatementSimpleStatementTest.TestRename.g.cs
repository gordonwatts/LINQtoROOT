// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace LINQToTTreeLib.Statements
{
    public partial class StatementSimpleStatementTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[PexRaisedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException754()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("\0", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename310()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "\u0089");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename122()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "$");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename462()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "$\0");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename491()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "$+");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename839()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "$0");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[PexRaisedException(typeof(AssertFailedException))]
public void TestRenameThrowsAssertFailedException967()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u008d", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "\u008d", "");
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename155()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u008d", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "\u008d\u008d", "");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u008d", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename683()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("q", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("q", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename293()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "${\0");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[Ignore]
[PexDescription("the test state was: duplicate path")]
public void TestRename68301()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename629()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "$&");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0100", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename49101()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "$+");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0100", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename888()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "$\'");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0100\u0100", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[PexRaisedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException299()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("\0", true);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename693()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "$`");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0100\u0100", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename344()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, "$_");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0100\u0100\u0100", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[PexRaisedException(typeof(AssertFailedException))]
public void TestRenameThrowsAssertFailedException515()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "\u0100", "$&");
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename363()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "\u0100$", "$&");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0100", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[PexRaisedException(typeof(AssertFailedException))]
public void TestRenameThrowsAssertFailedException544()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100\0\ufeff", true);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "\u0100\0\ufeff", "\u0100\0\ufeff");
}
    }
}
