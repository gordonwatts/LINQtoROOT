// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace LINQToTTreeLib.Statements
{
    public partial class StatementSimpleStatementTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException839()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("\0", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException603()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("\0", true);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException880()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException619()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w\0", (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException350()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "ww", (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException987()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\0\ufeff", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename127()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w\0", "\u0100w");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0100", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename202()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 = this.TestRename(statementSimpleStatement, "w", "w");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0100", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException204()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("\0\0", true);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, (string)null, (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException609()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "www", (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename92()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 = this.TestRename(statementSimpleStatement, "w", "ww");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("ww", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentException))]
public void TestRenameThrowsArgumentException137()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "\u0089", (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentException))]
public void TestRenameThrowsArgumentException139()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "\0", (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentException))]
public void TestRenameThrowsArgumentException78()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0100", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "\u0100");
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentException))]
public void TestRenameThrowsArgumentException872()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\0\u0100\u2000", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "\0\u0100\u2000", (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentException))]
public void TestRenameThrowsArgumentException748()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\ufeff\0\ufeff ", false);
    statementSimpleStatement1 = this.TestRename
                                    (statementSimpleStatement, "\ufeff\0\ufeff ", "\ufeff\0\ufeff ");
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename20202()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 = this.TestRename(statementSimpleStatement, "w", "w");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("w", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename62901()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 = this.TestRename(statementSimpleStatement, "w", "w$");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename68101()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w$0");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename37701()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w${");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestRenameThrowsArgumentNullException66()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "ww\0", (string)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename999()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w$&");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("ww", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename832()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w$+");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("ww", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestRename94()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w$_");
    Assert.IsNotNull((object)statementSimpleStatement1);
    Assert.AreEqual<string>("ww", statementSimpleStatement1.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement1.AddSemicolon);
    Assert.IsNull(statementSimpleStatement1.Parent);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.IsTrue(object.ReferenceEquals
                      ((object)statementSimpleStatement, (object)statementSimpleStatement1));
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(AssertFailedException))]
public void TestRenameThrowsAssertFailedException651()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w${");
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(AssertFailedException))]
public void TestRenameThrowsAssertFailedException340()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w\0");
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(AssertFailedException))]
public void TestRenameThrowsAssertFailedException338()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w$$");
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(AssertFailedException))]
public void TestRenameThrowsAssertFailedException509()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w$\'");
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(AssertFailedException))]
public void TestRenameThrowsAssertFailedException720()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w\0$");
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(AssertFailedException))]
public void TestRenameThrowsAssertFailedException339()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w$`");
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(AssertFailedException))]
public void TestRenameThrowsAssertFailedException596()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("w", false);
    statementSimpleStatement1 =
      this.TestRename(statementSimpleStatement, "w", "w$\'$");
}
    }
}
