// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using LINQToTTreeLib.Variables;
using System.Collections.Generic;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using LinqToTTreeInterfacesLib.Moles;
using LINQToTTreeLib.Variables.Moles;
using LINQToTTreeLib.Statements.Moles;
using Microsoft.Pex.Framework.Moles;
using Microsoft.Pex.Framework;

namespace LINQToTTreeLib.Statements
{
    public partial class StatementIfOnCountTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp280()
{
    SIValue sIValue;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sIValue = new SIValue();
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sIValue, (IValue)sIValue, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28001()
{
    SIVariable sIVariable;
    SIStatement sIStatement;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sIVariable = new SIVariable();
    sIStatement = new SIStatement();
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sIStatement;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sIVariable, (IValue)sIVariable, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28002()
{
    SIVariable sIVariable;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sIVariable = new SIVariable();
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)sIVariable;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sIVariable, (IValue)sIVariable, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28003()
{
    SIValue sIValue;
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sIValue = new SIValue();
    varInteger = VarIntegerFactory.Create(false, 0);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sIValue, (IValue)sIValue, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28004()
{
    SIValue sIValue;
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sIValue = new SIValue();
    varInteger = VarIntegerFactory.Create(false, 1);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sIValue, (IValue)sIValue, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28005()
{
    SVarInteger sVarInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sVarInteger = new SVarInteger();
    statementIncrementInteger =
      StatementIncrementIntegerFactory.Create((VarInteger)sVarInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28006()
{
    SVarInteger sVarInteger;
    SStatementIncrementInteger sStatementIncrementInteger;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sVarInteger = new SVarInteger();
    sStatementIncrementInteger =
      new SStatementIncrementInteger((VarInteger)sVarInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sStatementIncrementInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28007()
{
    SIValue sIValue;
    SStatementIfOnCount sStatementIfOnCount;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sIValue = new SIValue();
    sStatementIfOnCount = new SStatementIfOnCount((IValue)sIValue, 
                                                  (IValue)sIValue, StatementIfOnCount.ComparisonOperator.GreaterThan);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sStatementIfOnCount;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sIValue, (IValue)sIValue, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28008()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      SIValue sIValue;
      SIVariable sIVariable;
      StatementIfOnCount statementIfOnCount;
      IEnumerable<string> iEnumerable;
      sIValue = new SIValue();
      sIVariable = new SIVariable();
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.NextSegment(2).DefaultSession
          .At(1, 
                                            "sIVariable.LinqToTTreeInterfacesLib.IVariable.get_VariableName", "\0\0");
      IVariable[] iVariables = new IVariable[2];
      iVariables[0] = (IVariable)sIVariable;
      iVariables[1] = (IVariable)sIVariable;
      statementIfOnCount =
        StatementIfOnCountFactory.Create((IValue)sIValue, (IValue)sIValue, 
                                         StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                         (IStatement[])null, iVariables);
      iEnumerable = this.CodeItUp(statementIfOnCount);
      Assert.IsNotNull((object)iEnumerable);
      Assert.IsNotNull((object)statementIfOnCount);
      Assert.IsNotNull(statementIfOnCount.ValLeft);
      Assert.IsNotNull(statementIfOnCount.ValRight);
      Assert.IsTrue(object.ReferenceEquals
                        (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
      Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
          (StatementIfOnCount.ComparisonOperator.GreaterThan, 
           statementIfOnCount.Comparison);
      Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
      Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
    }
}
    }
}
