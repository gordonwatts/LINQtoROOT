using LINQToTTreeLib.Variables;
using System.Collections.Generic;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using LINQToTTreeLib.Variables.Moles;
using LINQToTTreeLib.Statements.Moles;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib.Statements
{
    public partial class StatementIfOnCountTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp280()
{
    SVarInteger sVarInteger;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sVarInteger = new SVarInteger();
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28001()
{
    SVarInteger sVarInteger;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sVarInteger = new SVarInteger();
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)sVarInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28002()
{
    SVarInteger sVarInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sVarInteger = new SVarInteger();
    statementIncrementInteger =
      StatementIncrementIntegerFactory.Create((VarInteger)sVarInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28003()
{
    SVarInteger sVarInteger;
    SStatementIncrementInteger sStatementIncrementInteger;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sVarInteger = new SVarInteger();
    sStatementIncrementInteger =
      new SStatementIncrementInteger((VarInteger)sVarInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sStatementIncrementInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28004()
{
    SVarInteger sVarInteger;
    SStatementIfOnCount sStatementIfOnCount;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sVarInteger = new SVarInteger();
    sStatementIfOnCount = new SStatementIfOnCount((IValue)sVarInteger, 
                                                  (IValue)sVarInteger, StatementIfOnCount.ComparisonOperator.GreaterThan);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sStatementIfOnCount;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28005()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28006()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    varInteger = VarIntegerFactory.Create(false, -7);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28007()
{
    SVarInteger sVarInteger;
    SVarInteger sVarInteger1;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    sVarInteger = new SVarInteger();
    sVarInteger1 = new SVarInteger();
    IVariable[] iVariables = new IVariable[2];
    iVariables[0] = (IVariable)sVarInteger1;
    iVariables[1] = (IVariable)sVarInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger1, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
    }
}
