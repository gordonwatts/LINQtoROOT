using System.Collections.Generic;
using System;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib.Statements
{
    public partial class StatementIfOnCountTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp280()
{
    StatementInlineBlockTest.dummyVarName dummyVarName;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    dummyVarName =
      new StatementInlineBlockTest.dummyVarName((string)null, (Type)null);
    dummyVarName.InitialValue = (IValue)null;
    dummyVarName.Declare = false;
    dummyVarName.RawValue = (string)null;
    statementIfOnCount = StatementIfOnCountFactory.Create
                             ((IDeclaredParameter)dummyVarName, (IValue)dummyVarName, 
                              StatementIfOnCount.ComparisonOperator.GreaterThan, 
                              (IStatement[])null, (IDeclaredParameter[])null);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.Counter);
    Assert.IsNotNull(statementIfOnCount.Limit);
    Assert.IsTrue(
                 object.ReferenceEquals(statementIfOnCount.Limit, statementIfOnCount.Counter)
                 );
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlockBase)statementIfOnCount).Statements);
    Assert.IsNotNull
        (((StatementInlineBlockBase)statementIfOnCount).DeclaredVariables);
    Assert.IsNull(((StatementInlineBlockBase)statementIfOnCount).Parent);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void CodeItUp28001()
{
    StatementInlineBlockTest.dummyVarName dummyVarName;
    StatementIfOnCount statementIfOnCount;
    IEnumerable<string> iEnumerable;
    dummyVarName =
      new StatementInlineBlockTest.dummyVarName((string)null, (Type)null);
    dummyVarName.InitialValue = (IValue)null;
    dummyVarName.Declare = false;
    dummyVarName.RawValue = (string)null;
    IDeclaredParameter[] iDeclaredParameters = new IDeclaredParameter[1];
    iDeclaredParameters[0] = (IDeclaredParameter)dummyVarName;
    statementIfOnCount = StatementIfOnCountFactory.Create
                             ((IDeclaredParameter)dummyVarName, (IValue)dummyVarName, 
                              StatementIfOnCount.ComparisonOperator.GreaterThan, 
                              (IStatement[])null, iDeclaredParameters);
    iEnumerable = this.CodeItUp(statementIfOnCount);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.Counter);
    Assert.IsNotNull(statementIfOnCount.Limit);
    Assert.IsTrue(
                 object.ReferenceEquals(statementIfOnCount.Limit, statementIfOnCount.Counter)
                 );
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlockBase)statementIfOnCount).Statements);
    Assert.IsNotNull
        (((StatementInlineBlockBase)statementIfOnCount).DeclaredVariables);
    Assert.IsNull(((StatementInlineBlockBase)statementIfOnCount).Parent);
}
    }
}
