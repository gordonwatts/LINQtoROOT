// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace LINQToTTreeLib.Statements
{
    public partial class StatementSimpleStatementTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void CodeItUp389()
{
    StatementSimpleStatement statementSimpleStatement;
    IEnumerable<string> iEnumerable;
    statementSimpleStatement = new StatementSimpleStatement("\0", false);
    iEnumerable = this.CodeItUp(statementSimpleStatement);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.AreEqual<string>("\0", statementSimpleStatement.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement.AddSemicolon);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void CodeItUp139()
{
    StatementSimpleStatement statementSimpleStatement;
    IEnumerable<string> iEnumerable;
    statementSimpleStatement = new StatementSimpleStatement("\0\ufeff", false);
    iEnumerable = this.CodeItUp(statementSimpleStatement);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.AreEqual<string>("\0\ufeff", statementSimpleStatement.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement.AddSemicolon);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void CodeItUp587()
{
    StatementSimpleStatement statementSimpleStatement;
    IEnumerable<string> iEnumerable;
    statementSimpleStatement = new StatementSimpleStatement("\0\ufeff", true);
    iEnumerable = this.CodeItUp(statementSimpleStatement);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.AreEqual<string>("\0\ufeff", statementSimpleStatement.Line);
    Assert.AreEqual<bool>(true, statementSimpleStatement.AddSemicolon);
}
    }
}
