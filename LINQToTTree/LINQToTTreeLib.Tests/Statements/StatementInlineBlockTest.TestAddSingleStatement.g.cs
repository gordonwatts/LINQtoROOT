using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib.Statements
{
    public partial class StatementInlineBlockTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddSingleStatementThrowsArgumentNullException65()
{
    this.TestAddSingleStatement((IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement818()
{
    StatementInlineBlock statementInlineBlock;
    statementInlineBlock = StatementInlineBlockFactory.Create
                               ((IStatement[])null, (IDeclaredParameter[])null);
    this.TestAddSingleStatement((IStatement)statementInlineBlock);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement81801()
{
    StatementInlineBlockTest.dummyVarName dummyVarName;
    StatementInlineBlock statementInlineBlock;
    dummyVarName =
      new StatementInlineBlockTest.dummyVarName((string)null, (Type)null);
    dummyVarName.InitialValue = (IValue)null;
    dummyVarName.Declare = false;
    dummyVarName.RawValue = (string)null;
    IDeclaredParameter[] iDeclaredParameters = new IDeclaredParameter[1];
    iDeclaredParameters[0] = (IDeclaredParameter)dummyVarName;
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, iDeclaredParameters);
    this.TestAddSingleStatement((IStatement)statementInlineBlock);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement81802()
{
    StatementInlineBlockTest.dummyVarName dummyVarName;
    StatementIfOnCount statementIfOnCount;
    dummyVarName =
      new StatementInlineBlockTest.dummyVarName((string)null, (Type)null);
    dummyVarName.InitialValue = (IValue)null;
    dummyVarName.Declare = false;
    dummyVarName.RawValue = (string)null;
    statementIfOnCount = StatementIfOnCountFactory.Create
                             ((IDeclaredParameter)dummyVarName, (IValue)dummyVarName, 
                              StatementIfOnCount.ComparisonOperator.GreaterThan, 
                              (IStatement[])null, (IDeclaredParameter[])null);
    this.TestAddSingleStatement((IStatement)statementIfOnCount);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement81806()
{
    StatementInlineBlock statementInlineBlock;
    StatementInlineBlock statementInlineBlock1;
    StatementInlineBlock statementInlineBlock2;
    statementInlineBlock = StatementInlineBlockFactory.Create
                               ((IStatement[])null, (IDeclaredParameter[])null);
    statementInlineBlock1 = StatementInlineBlockFactory.Create
                                ((IStatement[])null, (IDeclaredParameter[])null);
    IStatement[] iStatements = new IStatement[2];
    iStatements[0] = (IStatement)statementInlineBlock;
    iStatements[1] = (IStatement)statementInlineBlock1;
    statementInlineBlock2 =
      StatementInlineBlockFactory.Create(iStatements, (IDeclaredParameter[])null);
    this.TestAddSingleStatement((IStatement)statementInlineBlock2);
}
    }
}
