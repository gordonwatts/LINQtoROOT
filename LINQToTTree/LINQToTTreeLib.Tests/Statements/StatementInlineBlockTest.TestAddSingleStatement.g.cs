using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
using LINQToTTreeLib.Variables;
using LINQToTTreeLib.Statements.Moles;
using LINQToTTreeLib.Variables.Moles;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib.Statements
{
    public partial class StatementInlineBlockTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddSingleStatementThrowsArgumentNullException907()
{
    this.TestAddSingleStatement((IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement42()
{
    SStatementInlineBlock sStatementInlineBlock;
    sStatementInlineBlock = new SStatementInlineBlock();
    this.TestAddSingleStatement((IStatement)sStatementInlineBlock);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement818()
{
    StatementInlineBlock statementInlineBlock;
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    this.TestAddSingleStatement((IStatement)statementInlineBlock);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement81801()
{
    StatementInlineBlock statementInlineBlock;
    StatementInlineBlock statementInlineBlock1;
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementInlineBlock;
    statementInlineBlock1 =
      StatementInlineBlockFactory.Create(iStatements, (IVariable[])null);
    this.TestAddSingleStatement((IStatement)statementInlineBlock1);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement231()
{
    SVarInteger sVarInteger;
    SStatementIfOnCount sStatementIfOnCount;
    sVarInteger = new SVarInteger();
    sStatementIfOnCount = new SStatementIfOnCount((IValue)sVarInteger, 
                                                  (IValue)sVarInteger, StatementIfOnCount.ComparisonOperator.GreaterThan);
    this.TestAddSingleStatement((IStatement)sStatementIfOnCount);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement81806()
{
    SVarInteger sVarInteger;
    SVarInteger sVarInteger1;
    StatementIfOnCount statementIfOnCount;
    sVarInteger = new SVarInteger();
    sVarInteger1 = new SVarInteger();
    IVariable[] iVariables = new IVariable[2];
    iVariables[0] = (IVariable)sVarInteger1;
    iVariables[1] = (IVariable)sVarInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    this.TestAddSingleStatement((IStatement)statementIfOnCount);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement28202()
{
    SVarInteger sVarInteger;
    SStatementIncrementInteger sStatementIncrementInteger;
    sVarInteger = new SVarInteger();
    sStatementIncrementInteger =
      new SStatementIncrementInteger((VarInteger)sVarInteger);
    this.TestAddSingleStatement((IStatement)sStatementIncrementInteger);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement869()
{
    SVarInteger sVarInteger;
    StatementIncrementInteger statementIncrementInteger;
    sVarInteger = new SVarInteger();
    statementIncrementInteger =
      StatementIncrementIntegerFactory.Create((VarInteger)sVarInteger);
    this.TestAddSingleStatement((IStatement)statementIncrementInteger);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement81809()
{
    SVarInteger sVarInteger;
    StatementIfOnCount statementIfOnCount;
    sVarInteger = new SVarInteger();
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestAddSingleStatement((IStatement)statementIfOnCount);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement81810()
{
    SVarInteger sVarInteger;
    StatementIfOnCount statementIfOnCount;
    sVarInteger = new SVarInteger();
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)sVarInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)sVarInteger, (IValue)sVarInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    this.TestAddSingleStatement((IStatement)statementIfOnCount);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement622()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    this.TestAddSingleStatement((IStatement)statementIncrementInteger);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement62201()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    varInteger = VarIntegerFactory.Create(false, 1);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    this.TestAddSingleStatement((IStatement)statementIncrementInteger);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void TestAddSingleStatement81812()
{
    SStatementInlineBlock sStatementInlineBlock;
    StatementInlineBlock statementInlineBlock;
    sStatementInlineBlock = new SStatementInlineBlock();
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[1];
    iStatements[0] = (IStatement)sStatementInlineBlock;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements, iVariables);
    this.TestAddSingleStatement((IStatement)statementInlineBlock);
}
    }
}
