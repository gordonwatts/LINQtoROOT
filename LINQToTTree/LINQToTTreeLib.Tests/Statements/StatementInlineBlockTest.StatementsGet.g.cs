using System.Collections.Generic;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using LinqToTTreeInterfacesLib;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LINQToTTreeLib.Variables;
using LinqToTTreeInterfacesLib.Moles;
using LINQToTTreeLib.Variables.Moles;
using LINQToTTreeLib.Statements.Moles;

namespace LINQToTTreeLib.Statements
{
    public partial class StatementInlineBlockTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void StatementsGet216()
{
    StatementInlineBlock statementInlineBlock;
    IEnumerable<IStatement> iEnumerable;
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    iEnumerable = this.StatementsGet(statementInlineBlock);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementInlineBlock);
    Assert.IsNotNull(statementInlineBlock.Statements);
    Assert.IsTrue(
                 object.ReferenceEquals(statementInlineBlock.Statements, (object)iEnumerable)
                 );
    Assert.IsNotNull(statementInlineBlock.DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void StatementsGet965()
{
    SIStatement sIStatement;
    StatementInlineBlock statementInlineBlock;
    IEnumerable<IStatement> iEnumerable;
    sIStatement = new SIStatement();
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sIStatement;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements, (IVariable[])null);
    iEnumerable = this.StatementsGet(statementInlineBlock);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementInlineBlock);
    Assert.IsNotNull(statementInlineBlock.Statements);
    Assert.IsTrue(
                 object.ReferenceEquals(statementInlineBlock.Statements, (object)iEnumerable)
                 );
    Assert.IsNotNull(statementInlineBlock.DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void StatementsGet929()
{
    SVarInteger sVarInteger;
    SStatementIncrementInteger sStatementIncrementInteger;
    StatementInlineBlock statementInlineBlock;
    IEnumerable<IStatement> iEnumerable;
    sVarInteger = new SVarInteger();
    sStatementIncrementInteger =
      new SStatementIncrementInteger((VarInteger)sVarInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sStatementIncrementInteger;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements, (IVariable[])null);
    iEnumerable = this.StatementsGet(statementInlineBlock);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementInlineBlock);
    Assert.IsNotNull(statementInlineBlock.Statements);
    Assert.IsTrue(
                 object.ReferenceEquals(statementInlineBlock.Statements, (object)iEnumerable)
                 );
    Assert.IsNotNull(statementInlineBlock.DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void StatementsGet871()
{
    SVarInteger sVarInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementInlineBlock statementInlineBlock;
    IEnumerable<IStatement> iEnumerable;
    sVarInteger = new SVarInteger();
    statementIncrementInteger =
      StatementIncrementIntegerFactory.Create((VarInteger)sVarInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements, (IVariable[])null);
    iEnumerable = this.StatementsGet(statementInlineBlock);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementInlineBlock);
    Assert.IsNotNull(statementInlineBlock.Statements);
    Assert.IsTrue(
                 object.ReferenceEquals(statementInlineBlock.Statements, (object)iEnumerable)
                 );
    Assert.IsNotNull(statementInlineBlock.DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void StatementsGet92901()
{
    VarInteger varInteger;
    SStatementIncrementInteger sStatementIncrementInteger;
    StatementInlineBlock statementInlineBlock;
    IEnumerable<IStatement> iEnumerable;
    varInteger = VarIntegerFactory.Create(false, 0);
    sStatementIncrementInteger = new SStatementIncrementInteger(varInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sStatementIncrementInteger;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements, (IVariable[])null);
    iEnumerable = this.StatementsGet(statementInlineBlock);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementInlineBlock);
    Assert.IsNotNull(statementInlineBlock.Statements);
    Assert.IsTrue(
                 object.ReferenceEquals(statementInlineBlock.Statements, (object)iEnumerable)
                 );
    Assert.IsNotNull(statementInlineBlock.DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void StatementsGet92902()
{
    VarInteger varInteger;
    SStatementIncrementInteger sStatementIncrementInteger;
    StatementInlineBlock statementInlineBlock;
    IEnumerable<IStatement> iEnumerable;
    varInteger = VarIntegerFactory.Create(false, 1);
    sStatementIncrementInteger = new SStatementIncrementInteger(varInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sStatementIncrementInteger;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements, (IVariable[])null);
    iEnumerable = this.StatementsGet(statementInlineBlock);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementInlineBlock);
    Assert.IsNotNull(statementInlineBlock.Statements);
    Assert.IsTrue(
                 object.ReferenceEquals(statementInlineBlock.Statements, (object)iEnumerable)
                 );
    Assert.IsNotNull(statementInlineBlock.DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementInlineBlockTest))]
public void StatementsGet785()
{
    SStatementInlineBlock sStatementInlineBlock;
    StatementInlineBlock statementInlineBlock;
    IEnumerable<IStatement> iEnumerable;
    sStatementInlineBlock = new SStatementInlineBlock();
    IStatement[] iStatements = new IStatement[3];
    IVariable[] iVariables = new IVariable[3];
    iStatements[0] = (IStatement)sStatementInlineBlock;
    iStatements[1] = (IStatement)sStatementInlineBlock;
    iStatements[2] = (IStatement)sStatementInlineBlock;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements, iVariables);
    iEnumerable = this.StatementsGet(statementInlineBlock);
    Assert.IsNotNull((object)iEnumerable);
    Assert.IsNotNull((object)statementInlineBlock);
    Assert.IsNotNull(statementInlineBlock.Statements);
    Assert.IsTrue(
                 object.ReferenceEquals(statementInlineBlock.Statements, (object)iEnumerable)
                 );
    Assert.IsNotNull(statementInlineBlock.DeclaredVariables);
}
    }
}
