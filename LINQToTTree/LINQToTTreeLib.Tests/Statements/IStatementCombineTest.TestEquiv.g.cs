// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using LINQToTTreeLib.Variables;
using LINQToTTreeLib.Statements;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace LINQToTTreeLib.Tests.Statements
{
    public partial class IStatementCombineTest
    {
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv13102()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    this.TestEquiv((IStatement)statementIncrementInteger, 
                   (IStatement)statementIncrementInteger);
    Assert.IsNotNull((object)statementIncrementInteger);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException87()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    this.TestEquiv((IStatement)statementIncrementInteger, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv830()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)statementIncrementInteger, (IStatement)s0);
    Assert.IsNotNull((object)statementIncrementInteger);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv782()
{
    StatementBreak s0 = new StatementBreak();
    StatementBreak s1 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)s1);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv740()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementIncrementInteger);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException904()
{
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12802()
{
    StatementInlineBlock statementInlineBlock;
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementInlineBlock);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12803()
{
    StatementInlineBlock statementInlineBlock;
    IStatement[] iStatements = new IStatement[1];
    StatementBreak s0 = new StatementBreak();
    iStatements[0] = (IStatement)s0;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements, (IVariable[])null);
    StatementBreak s1 = new StatementBreak();
    this.TestEquiv((IStatement)s1, (IStatement)statementInlineBlock);
    Assert.IsNotNull((object)s1);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12812()
{
    VarInteger varInteger;
    StatementAssign statementAssign;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementAssign);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12805()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12807()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException960()
{
    StatementInlineBlock statementInlineBlock;
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    this.TestEquiv((IStatement)statementInlineBlock, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv2801()
{
    StatementInlineBlock statementInlineBlock;
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)statementInlineBlock, (IStatement)s0);
    Assert.IsNotNull((object)statementInlineBlock);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv33()
{
    StatementInlineBlock statementInlineBlock;
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    this.TestEquiv
        ((IStatement)statementInlineBlock, (IStatement)statementInlineBlock);
    Assert.IsNotNull((object)statementInlineBlock);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12824()
{
    StatementInlineBlock statementInlineBlock;
    IStatement[] iStatements = new IStatement[2];
    StatementBreak s0 = new StatementBreak();
    iStatements[0] = (IStatement)s0;
    StatementBreak s1 = new StatementBreak();
    iStatements[1] = (IStatement)s1;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements, (IVariable[])null);
    StatementBreak s2 = new StatementBreak();
    this.TestEquiv((IStatement)s2, (IStatement)statementInlineBlock);
    Assert.IsNotNull((object)s2);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv74002()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    varInteger = VarIntegerFactory.Create(false, 1);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementIncrementInteger);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv97701()
{
    StatementSimpleStatement statementSimpleStatement;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("\0", false);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementSimpleStatement);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12808()
{
    VarInteger varInteger;
    StatementFilter statementFilter;
    varInteger = VarIntegerFactory.Create(false, 0);
    IStatement[] iStatements = new IStatement[0];
    IVariable[] iVariables = new IVariable[0];
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementFilter);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12809()
{
    VarInteger varInteger;
    StatementRecordIndicies statementRecordIndicies;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementRecordIndicies =
      StatementRecordIndiciesFactory.Create((IValue)varInteger, (IValue)varInteger);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementRecordIndicies);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12811()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementAssign statementAssign;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementAssign);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12813()
{
    VarInteger varInteger;
    StatementLoopOverGood statementLoopOverGood;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementLoopOverGood =
      StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                          (IValue)varInteger, (IStatement[])null, (IVariable[])null);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementLoopOverGood);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException534()
{
    StatementSimpleStatement statementSimpleStatement;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("\0", false);
    this.TestEquiv((IStatement)statementSimpleStatement, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv42201()
{
    StatementSimpleStatement statementSimpleStatement;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)statementSimpleStatement, (IStatement)s0);
    Assert.IsNotNull((object)statementSimpleStatement);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv63801()
{
    StatementSimpleStatement statementSimpleStatement;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    this.TestEquiv
        ((IStatement)statementSimpleStatement, (IStatement)statementSimpleStatement);
    Assert.IsNotNull((object)statementSimpleStatement);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException773()
{
    VarInteger varInteger;
    StatementRecordIndicies statementRecordIndicies;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementRecordIndicies =
      StatementRecordIndiciesFactory.Create((IValue)varInteger, (IValue)varInteger);
    this.TestEquiv((IStatement)statementRecordIndicies, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv2803()
{
    VarInteger varInteger;
    StatementRecordIndicies statementRecordIndicies;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementRecordIndicies =
      StatementRecordIndiciesFactory.Create((IValue)varInteger, (IValue)varInteger);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)statementRecordIndicies, (IStatement)s0);
    Assert.IsNotNull((object)statementRecordIndicies);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv3304()
{
    VarInteger varInteger;
    StatementRecordIndicies statementRecordIndicies;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementRecordIndicies =
      StatementRecordIndiciesFactory.Create((IValue)varInteger, (IValue)varInteger);
    this.TestEquiv
        ((IStatement)statementRecordIndicies, (IStatement)statementRecordIndicies);
    Assert.IsNotNull((object)statementRecordIndicies);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException221()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv((IStatement)statementIfOnCount, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException81()
{
    StatementSimpleStatement statementSimpleStatement;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\0\ufeff", false);
    this.TestEquiv((IStatement)statementSimpleStatement, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv2804()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)statementIfOnCount, (IStatement)s0);
    Assert.IsNotNull((object)statementIfOnCount);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException272()
{
    StatementSimpleStatement statementSimpleStatement;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\0\ufeff", true);
    this.TestEquiv((IStatement)statementSimpleStatement, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv22()
{
    StatementSimpleStatement statementSimpleStatement;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\0\u0100\u2000", true);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)statementSimpleStatement, (IStatement)s0);
    Assert.IsNotNull((object)statementSimpleStatement);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv979()
{
    StatementSimpleStatement statementSimpleStatement;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\0\u0100\u2000", true);
    this.TestEquiv
        ((IStatement)statementSimpleStatement, (IStatement)statementSimpleStatement);
    Assert.IsNotNull((object)statementSimpleStatement);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12814()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    IVariable[] iVariables = new IVariable[2];
    iVariables[0] = (IVariable)varInteger;
    iVariables[1] = (IVariable)varInteger1;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger1, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12816()
{
    VarInteger varInteger;
    StatementLoopOverGood statementLoopOverGood;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementLoopOverGood =
      StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                          (IValue)varInteger, (IStatement[])null, iVariables);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementLoopOverGood);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv12817()
{
    VarInteger varInteger;
    StatementLoopOverGood statementLoopOverGood;
    varInteger =
      VarIntegerFactory.Create(PexSafeHelpers.ByteToBoolean((byte)16), int.MaxValue);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementLoopOverGood =
      StatementLoopOverGoodFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                          (IValue)varInteger, (IStatement[])null, iVariables);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)s0, (IStatement)statementLoopOverGood);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException222()
{
    VarInteger varInteger;
    StatementAssign statementAssign;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
    this.TestEquiv((IStatement)statementAssign, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv2805()
{
    VarInteger varInteger;
    StatementAssign statementAssign;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
    StatementBreak s0 = new StatementBreak();
    this.TestEquiv((IStatement)statementAssign, (IStatement)s0);
    Assert.IsNotNull((object)statementAssign);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv3305()
{
    VarInteger varInteger;
    StatementAssign statementAssign;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementAssign =
      StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
    this.TestEquiv((IStatement)statementAssign, (IStatement)statementAssign);
    Assert.IsNotNull((object)statementAssign);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv2806()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    IStatement[] iStatements = new IStatement[2];
    StatementBreak s0 = new StatementBreak();
    iStatements[0] = (IStatement)s0;
    StatementBreak s1 = new StatementBreak();
    iStatements[1] = (IStatement)s1;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    StatementBreak s2 = new StatementBreak();
    this.TestEquiv((IStatement)statementIfOnCount, (IStatement)s2);
    Assert.IsNotNull((object)statementIfOnCount);
}
[TestMethod]
[PexGeneratedBy(typeof(IStatementCombineTest))]
public void TestEquiv3306()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    IStatement[] iStatements = new IStatement[2];
    StatementBreak s0 = new StatementBreak();
    iStatements[0] = (IStatement)s0;
    StatementBreak s1 = new StatementBreak();
    iStatements[1] = (IStatement)s1;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    this.TestEquiv((IStatement)statementIfOnCount, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)statementIfOnCount);
}
    }
}
