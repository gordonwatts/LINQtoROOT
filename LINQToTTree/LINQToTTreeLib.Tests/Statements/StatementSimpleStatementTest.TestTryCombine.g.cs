using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib.Statements
{
    public partial class StatementSimpleStatementTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestTryCombineThrowsArgumentNullException250()
{
    StatementSimpleStatement statementSimpleStatement;
    bool b;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("\0", false);
    b = this.TestTryCombine(statementSimpleStatement, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestTryCombine589()
{
    StatementSimpleStatement statementSimpleStatement;
    bool b;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u0089", false);
    b = this.TestTryCombine
            (statementSimpleStatement, (IStatement)statementSimpleStatement);
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.AreEqual<string>("\u0089", statementSimpleStatement.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement.AddSemicolon);
    Assert.IsNull(statementSimpleStatement.Parent);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestTryCombineThrowsArgumentNullException118()
{
    StatementSimpleStatement statementSimpleStatement;
    bool b;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\0\ufeff", false);
    b = this.TestTryCombine(statementSimpleStatement, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
public void TestTryCombine533()
{
    StatementSimpleStatement statementSimpleStatement;
    StatementSimpleStatement statementSimpleStatement1;
    bool b;
    statementSimpleStatement =
      StatementSimpleStatementFactory.Create("\u4000", false);
    statementSimpleStatement1 =
      StatementSimpleStatementFactory.Create("\u0800", false);
    b = this.TestTryCombine
            (statementSimpleStatement, (IStatement)statementSimpleStatement1);
    Assert.AreEqual<bool>(false, b);
    Assert.IsNotNull((object)statementSimpleStatement);
    Assert.AreEqual<string>("\u4000", statementSimpleStatement.Line);
    Assert.AreEqual<bool>(false, statementSimpleStatement.AddSemicolon);
    Assert.IsNull(statementSimpleStatement.Parent);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestTryCombineThrowsArgumentNullException252()
{
    StatementSimpleStatement statementSimpleStatement;
    bool b;
    statementSimpleStatement = StatementSimpleStatementFactory.Create
                                   ("\0", PexSafeHelpers.ByteToBoolean((byte)2));
    b = this.TestTryCombine(statementSimpleStatement, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementSimpleStatementTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestTryCombineThrowsArgumentNullException642()
{
    StatementSimpleStatement statementSimpleStatement;
    bool b;
    statementSimpleStatement = StatementSimpleStatementFactory.Create("\0\0", true);
    b = this.TestTryCombine(statementSimpleStatement, (IStatement)null);
}
    }
}
