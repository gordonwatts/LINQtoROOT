// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using LinqToTTreeInterfacesLib;
using LINQToTTreeLib.Statements;
using LINQToTTreeLib.Variables;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace LINQToTTreeLib.Tests
{
    public partial class StatementAssignTest
    {
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        [PexRaisedException(typeof(ArgumentNullException))]
        public void IsSameStatementTestThrowsArgumentNullException598()
        {
            VarInteger varInteger;
            StatementAssign statementAssign;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            b = this.IsSameStatementTest(statementAssign, (IStatement)null);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest785()
        {
            VarInteger varInteger;
            StatementAssign statementAssign;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            b = this.IsSameStatementTest(statementAssign, (IStatement)statementAssign);
            Assert.AreEqual<bool>(true, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
            Assert.IsTrue(object.ReferenceEquals
                              (statementAssign.Expression, statementAssign.ResultVariable));
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        [PexRaisedException(typeof(AssertFailedException))]
        public void IsSameStatementTestThrowsAssertFailedException517()
        {
            VarInteger varInteger;
            StatementAssign statementAssign;
            StatementIncrementInteger statementIncrementInteger;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
            b = this.IsSameStatementTest
                    (statementAssign, (IStatement)statementIncrementInteger);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest854()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            StatementAssign statementAssign;
            StatementIncrementInteger statementIncrementInteger;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
            statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
            b = this.IsSameStatementTest
                    (statementAssign, (IStatement)statementIncrementInteger);
            Assert.AreEqual<bool>(false, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest78501()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            StatementAssign statementAssign;
            bool b;
            varInteger = VarIntegerFactory.Create(false, int.MaxValue);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
            b = this.IsSameStatementTest(statementAssign, (IStatement)statementAssign);
            Assert.AreEqual<bool>(true, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest727()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            StatementAssign statementAssign;
            VarInteger varInteger2;
            StatementAssign statementAssign1;
            bool b;
            varInteger = VarIntegerFactory.Create(false, int.MaxValue);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
            varInteger2 = VarIntegerFactory.Create(false, 8);
            statementAssign1 =
              StatementAssignFactory.Create((IVariable)varInteger2, (IValue)varInteger);
            b = this.IsSameStatementTest(statementAssign, (IStatement)statementAssign1);
            Assert.AreEqual<bool>(false, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        [PexRaisedException(typeof(AssertFailedException))]
        public void IsSameStatementTestThrowsAssertFailedException856()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            VarInteger varInteger2;
            StatementAssign statementAssign;
            VarInteger varInteger3;
            StatementAssign statementAssign1;
            bool b;
            varInteger = VarIntegerFactory.Create(false, int.MaxValue);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            varInteger2 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger2);
            varInteger3 = VarIntegerFactory.Create(false, 8);
            statementAssign1 =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            b = this.IsSameStatementTest(statementAssign, (IStatement)statementAssign1);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        [ExpectedException(typeof(ArgumentNullException))]
        public void IsSameStatementTestThrowsArgumentNullException62()
        {
            VarInteger varInteger;
            StatementAssign statementAssign;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            b = this.IsSameStatementTest(statementAssign, (IStatement)null);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest78502()
        {
            VarInteger varInteger;
            StatementAssign statementAssign;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            b = this.IsSameStatementTest(statementAssign, (IStatement)statementAssign);
            Assert.AreEqual<bool>(true, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
            Assert.IsTrue(object.ReferenceEquals
                              (statementAssign.Expression, statementAssign.ResultVariable));
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        [PexRaisedException(typeof(AssertFailedException))]
        public void IsSameStatementTestThrowsAssertFailedException618()
        {
            VarInteger varInteger;
            StatementAssign statementAssign;
            StatementIncrementInteger statementIncrementInteger;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
            b = this.IsSameStatementTest
                    (statementAssign, (IStatement)statementIncrementInteger);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest85401()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            StatementAssign statementAssign;
            StatementIncrementInteger statementIncrementInteger;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
            statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
            b = this.IsSameStatementTest
                    (statementAssign, (IStatement)statementIncrementInteger);
            Assert.AreEqual<bool>(false, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest78503()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            StatementAssign statementAssign;
            bool b;
            varInteger = VarIntegerFactory.Create(false, int.MaxValue);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
            b = this.IsSameStatementTest(statementAssign, (IStatement)statementAssign);
            Assert.AreEqual<bool>(true, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest72701()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            StatementAssign statementAssign;
            VarInteger varInteger2;
            StatementAssign statementAssign1;
            bool b;
            varInteger = VarIntegerFactory.Create(false, int.MaxValue);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
            varInteger2 = VarIntegerFactory.Create(false, 0);
            statementAssign1 =
              StatementAssignFactory.Create((IVariable)varInteger1, (IValue)varInteger);
            b = this.IsSameStatementTest(statementAssign1, (IStatement)statementAssign);
            Assert.AreEqual<bool>(false, b);
            Assert.IsNotNull((object)statementAssign1);
            Assert.IsNotNull(statementAssign1.ResultVariable);
            Assert.IsNotNull(statementAssign1.Expression);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        [ExpectedException(typeof(ArgumentNullException))]
        public void IsSameStatementTestThrowsArgumentNullException919()
        {
            VarInteger varInteger;
            StatementAssign statementAssign;
            bool b;
            varInteger = VarIntegerFactory.Create(false, -2);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            b = this.IsSameStatementTest(statementAssign, (IStatement)null);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        [PexRaisedException(typeof(AssertFailedException))]
        public void IsSameStatementTestThrowsAssertFailedException56()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            StatementAssign statementAssign;
            VarInteger varInteger2;
            StatementAssign statementAssign1;
            bool b;
            varInteger = VarIntegerFactory.Create(false, int.MaxValue);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            varInteger2 = VarIntegerFactory.Create(false, -65536);
            statementAssign1 =
              StatementAssignFactory.Create((IVariable)varInteger1, (IValue)varInteger);
            b = this.IsSameStatementTest(statementAssign1, (IStatement)statementAssign);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest85402()
        {
            VarInteger varInteger;
            StatementAssign statementAssign;
            StatementIncrementInteger statementIncrementInteger;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
            b = this.IsSameStatementTest
                    (statementAssign, (IStatement)statementIncrementInteger);
            Assert.AreEqual<bool>(false, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
            Assert.IsTrue(object.ReferenceEquals
                              (statementAssign.Expression, statementAssign.ResultVariable));
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest85403()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            StatementAssign statementAssign;
            StatementIncrementInteger statementIncrementInteger;
            bool b;
            varInteger = VarIntegerFactory.Create(false, int.MaxValue);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
            statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger1);
            b = this.IsSameStatementTest
                    (statementAssign, (IStatement)statementIncrementInteger);
            Assert.AreEqual<bool>(false, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest72702()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            StatementAssign statementAssign;
            StatementAssign statementAssign1;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger);
            statementAssign1 =
              StatementAssignFactory.Create((IVariable)varInteger1, (IValue)varInteger);
            b = this.IsSameStatementTest(statementAssign, (IStatement)statementAssign1);
            Assert.AreEqual<bool>(false, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
            Assert.IsTrue(object.ReferenceEquals
                              (statementAssign.Expression, statementAssign.ResultVariable));
        }
        [TestMethod]
        [PexGeneratedBy(typeof(StatementAssignTest))]
        public void IsSameStatementTest72703()
        {
            VarInteger varInteger;
            VarInteger varInteger1;
            StatementAssign statementAssign;
            VarInteger varInteger2;
            StatementAssign statementAssign1;
            bool b;
            varInteger = VarIntegerFactory.Create(false, 0);
            varInteger1 = VarIntegerFactory.Create(false, 0);
            statementAssign =
              StatementAssignFactory.Create((IVariable)varInteger, (IValue)varInteger1);
            varInteger2 = VarIntegerFactory.Create(false, 0);
            statementAssign1 =
              StatementAssignFactory.Create((IVariable)varInteger2, (IValue)varInteger1);
            b = this.IsSameStatementTest(statementAssign, (IStatement)statementAssign1);
            Assert.AreEqual<bool>(false, b);
            Assert.IsNotNull((object)statementAssign);
            Assert.IsNotNull(statementAssign.ResultVariable);
            Assert.IsNotNull(statementAssign.Expression);
        }
    }
}
