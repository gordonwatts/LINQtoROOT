// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using LINQToTTreeLib.Variables;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace LINQToTTreeLib.Statements
{
    public partial class StatementIfOnCountTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException271()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv33()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException126()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, 0);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    this.TestEquiv(statementIfOnCount, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv3301()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    StatementInlineBlock statementInlineBlock;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount, (IStatement)statementInlineBlock);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv3302()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    StatementInlineBlock statementInlineBlock;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementIfOnCount;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements, (IVariable[])null);
    this.TestEquiv(statementIfOnCount, (IStatement)statementInlineBlock);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv22()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    StatementIncrementInteger statementIncrementInteger;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    this.TestEquiv(statementIfOnCount, (IStatement)statementIncrementInteger);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.ValLeft);
    Assert.IsNotNull(statementIfOnCount.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount.ValRight, statementIfOnCount.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException416()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, 1);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv3303()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementIfOnCount statementIfOnCount;
    StatementIfOnCount statementIfOnCount1;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    statementIfOnCount1 =
      StatementIfOnCountFactory.Create((IValue)varInteger1, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount1, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)statementIfOnCount1);
    Assert.IsNotNull(statementIfOnCount1.ValLeft);
    Assert.IsNotNull(statementIfOnCount1.ValRight);
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount1.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount1).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount1).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv3304()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementIfOnCount statementIfOnCount;
    StatementIfOnCount statementIfOnCount1;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    statementIfOnCount1 =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.LessThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount1, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)statementIfOnCount1);
    Assert.IsNotNull(statementIfOnCount1.ValLeft);
    Assert.IsNotNull(statementIfOnCount1.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount1.ValRight, statementIfOnCount1.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.LessThan, 
         statementIfOnCount1.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount1).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount1).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv3305()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementIfOnCount statementIfOnCount;
    StatementIfOnCount statementIfOnCount1;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IValue)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    IStatement[] iStatements = new IStatement[2];
    iStatements[0] = (IStatement)statementIfOnCount;
    iStatements[1] = (IStatement)statementIfOnCount;
    statementIfOnCount1 =
      StatementIfOnCountFactory.Create((IValue)varInteger1, (IValue)varInteger1, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    this.TestEquiv(statementIfOnCount1, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)statementIfOnCount1);
    Assert.IsNotNull(statementIfOnCount1.ValLeft);
    Assert.IsNotNull(statementIfOnCount1.ValRight);
    Assert.IsTrue(object.ReferenceEquals
                      (statementIfOnCount1.ValRight, statementIfOnCount1.ValLeft));
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount1.Comparison);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount1).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementIfOnCount1).DeclaredVariables);
}
    }
}
