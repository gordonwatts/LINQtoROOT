using LINQToTTreeLib.Variables;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib.Statements
{
    public partial class StatementIfOnCountTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException790()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv33()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.Counter);
    Assert.IsNotNull(statementIfOnCount.Limit);
    Assert.IsTrue(
                 object.ReferenceEquals(statementIfOnCount.Limit, statementIfOnCount.Counter)
                 );
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlockBase)statementIfOnCount).Statements);
    Assert.IsNotNull
        (((StatementInlineBlockBase)statementIfOnCount).DeclaredVariables);
    Assert.IsNull(((StatementInlineBlockBase)statementIfOnCount).Parent);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException375()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, 0);
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    this.TestEquiv(statementIfOnCount, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv3301()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    StatementIncrementInteger statementIncrementInteger;
    varInteger = VarIntegerFactory.Create(false, 0);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    this.TestEquiv(statementIfOnCount, (IStatement)statementIncrementInteger);
    Assert.IsNotNull((object)statementIfOnCount);
    Assert.IsNotNull(statementIfOnCount.Counter);
    Assert.IsNotNull(statementIfOnCount.Limit);
    Assert.IsTrue(
                 object.ReferenceEquals(statementIfOnCount.Limit, statementIfOnCount.Counter)
                 );
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount.Comparison);
    Assert.IsNotNull(((StatementInlineBlockBase)statementIfOnCount).Statements);
    Assert.IsNotNull
        (((StatementInlineBlockBase)statementIfOnCount).DeclaredVariables);
    Assert.IsNull(((StatementInlineBlockBase)statementIfOnCount).Parent);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException436()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    this.TestEquiv(statementIfOnCount, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException768()
{
    VarInteger varInteger;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, -7);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException460()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    VarInteger varInteger2;
    StatementIfOnCount statementIfOnCount;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    varInteger2 = VarIntegerFactory.Create(false, 0);
    IVariable[] iVariables = new IVariable[2];
    iVariables[0] = (IVariable)varInteger2;
    iVariables[1] = (IVariable)varInteger1;
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger2, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, iVariables);
    this.TestEquiv(statementIfOnCount, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv3302()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementIfOnCount statementIfOnCount;
    StatementIfOnCount statementIfOnCount1;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    IStatement[] iStatements = new IStatement[0];
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    statementIfOnCount1 =
      StatementIfOnCountFactory.Create((IVariable)varInteger1, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount1, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)statementIfOnCount1);
    Assert.IsNotNull(statementIfOnCount1.Counter);
    Assert.IsNotNull(statementIfOnCount1.Limit);
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.GreaterThan, 
         statementIfOnCount1.Comparison);
    Assert.IsNotNull(((StatementInlineBlockBase)statementIfOnCount1).Statements);
    Assert.IsNotNull
        (((StatementInlineBlockBase)statementIfOnCount1).DeclaredVariables);
    Assert.IsNull(((StatementInlineBlockBase)statementIfOnCount1).Parent);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementIfOnCountTest))]
public void TestEquiv3303()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementIfOnCount statementIfOnCount;
    StatementIfOnCount statementIfOnCount1;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 0);
    IStatement[] iStatements = new IStatement[0];
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger1, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       iStatements, (IVariable[])null);
    statementIfOnCount1 =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger1, 
                                       StatementIfOnCount.ComparisonOperator.LessThan, 
                                       (IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementIfOnCount1, (IStatement)statementIfOnCount);
    Assert.IsNotNull((object)statementIfOnCount1);
    Assert.IsNotNull(statementIfOnCount1.Counter);
    Assert.IsNotNull(statementIfOnCount1.Limit);
    Assert.AreEqual<StatementIfOnCount.ComparisonOperator>
        (StatementIfOnCount.ComparisonOperator.LessThan, 
         statementIfOnCount1.Comparison);
    Assert.IsNotNull(((StatementInlineBlockBase)statementIfOnCount1).Statements);
    Assert.IsNotNull
        (((StatementInlineBlockBase)statementIfOnCount1).DeclaredVariables);
    Assert.IsNull(((StatementInlineBlockBase)statementIfOnCount1).Parent);
}
    }
}
