// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using LINQToTTreeLib.Variables;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace LINQToTTreeLib.Statements
{
    public partial class StatementFilterTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StatementFilterTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestEquivThrowsArgumentNullException379()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    iVariables[0] = (IVariable)varInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    this.TestEquiv(statementFilter, (IStatement)null);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementFilterTest))]
public void TestEquiv22()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[0];
    iStatements[0] = (IStatement)statementIncrementInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    this.TestEquiv(statementFilter, (IStatement)statementIncrementInteger);
    Assert.IsNotNull((object)statementFilter);
    Assert.IsNotNull(statementFilter.TestExpression);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementFilterTest))]
public void TestEquiv33()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[0];
    iStatements[0] = (IStatement)statementIncrementInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    this.TestEquiv(statementFilter, (IStatement)statementFilter);
    Assert.IsNotNull((object)statementFilter);
    Assert.IsNotNull(statementFilter.TestExpression);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementFilterTest))]
public void TestEquiv3301()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    StatementInlineBlock statementInlineBlock;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[0];
    iStatements[0] = (IStatement)statementIncrementInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementFilter, (IStatement)statementInlineBlock);
    Assert.IsNotNull((object)statementFilter);
    Assert.IsNotNull(statementFilter.TestExpression);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementFilterTest))]
public void TestEquiv3302()
{
    VarInteger varInteger;
    VarInteger varInteger1;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    StatementInlineBlock statementInlineBlock;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    varInteger1 = VarIntegerFactory.Create(false, 1);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger1);
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[0];
    iStatements[0] = (IStatement)statementIncrementInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    this.TestEquiv(statementFilter, (IStatement)statementInlineBlock);
    Assert.IsNotNull((object)statementFilter);
    Assert.IsNotNull(statementFilter.TestExpression);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementFilterTest))]
public void TestEquiv3303()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    StatementInlineBlock statementInlineBlock;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[0];
    iStatements[0] = (IStatement)statementIncrementInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    IStatement[] iStatements1 = new IStatement[1];
    iStatements1[0] = (IStatement)statementFilter;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements1, (IVariable[])null);
    this.TestEquiv(statementFilter, (IStatement)statementInlineBlock);
    Assert.IsNotNull((object)statementFilter);
    Assert.IsNotNull(statementFilter.TestExpression);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementFilterTest))]
public void TestEquiv3304()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    StatementInlineBlock statementInlineBlock;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[0];
    iStatements[0] = (IStatement)statementIncrementInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    IStatement[] iStatements1 = new IStatement[1];
    iStatements1[0] = (IStatement)statementIncrementInteger;
    statementInlineBlock =
      StatementInlineBlockFactory.Create(iStatements1, (IVariable[])null);
    this.TestEquiv(statementFilter, (IStatement)statementInlineBlock);
    Assert.IsNotNull((object)statementFilter);
    Assert.IsNotNull(statementFilter.TestExpression);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementFilterTest))]
public void TestEquiv3305()
{
    VarInteger varInteger;
    StatementFilter statementFilter;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    IStatement[] iStatements = new IStatement[0];
    IVariable[] iVariables = new IVariable[0];
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    this.TestEquiv(statementFilter, (IStatement)statementFilter);
    Assert.IsNotNull((object)statementFilter);
    Assert.IsNotNull(statementFilter.TestExpression);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementFilterTest))]
public void TestEquiv2201()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    iVariables[0] = (IVariable)varInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    this.TestEquiv(statementFilter, (IStatement)statementIncrementInteger);
    Assert.IsNotNull((object)statementFilter);
    Assert.IsNotNull(statementFilter.TestExpression);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).DeclaredVariables);
}
[TestMethod]
[PexGeneratedBy(typeof(StatementFilterTest))]
public void TestEquiv2202()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    varInteger = VarIntegerFactory.Create(true, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    iVariables[0] = (IVariable)varInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    this.TestEquiv(statementFilter, (IStatement)statementIncrementInteger);
    Assert.IsNotNull((object)statementFilter);
    Assert.IsNotNull(statementFilter.TestExpression);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).Statements);
    Assert.IsNotNull(((StatementInlineBlock)statementFilter).DeclaredVariables);
}
    }
}
