using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
using LINQToTTreeLib.Variables;
using LinqToTTreeInterfacesLib;
using LINQToTTreeLib.Statements;
using ROOTNET;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib
{
    public partial class CPPTranslatorTest
    {
[TestMethod]
[PexGeneratedBy(typeof(CPPTranslatorTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TranslateGeneratedCodeThrowsArgumentNullException23()
{
    CPPTranslator cPPTranslator;
    Dictionary<string, object> dictionary;
    cPPTranslator = CPPTranslatorFactory.Create();
    dictionary = this.TranslateGeneratedCode(cPPTranslator, (GeneratedCode)null);
}
[TestMethod]
[PexGeneratedBy(typeof(CPPTranslatorTest))]
public void TranslateGeneratedCode550()
{
    CPPTranslator cPPTranslator;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    Dictionary<string, object> dictionary;
    cPPTranslator = CPPTranslatorFactory.Create();
    varInteger = VarIntegerFactory.Create(false, 0);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    dictionary = this.TranslateGeneratedCode(cPPTranslator, generatedCode);
    Assert.IsNotNull((object)dictionary);
    Assert.IsNotNull(dictionary.Comparer);
    Assert.AreEqual<int>(4, dictionary.Count);
    Assert.IsNotNull((object)cPPTranslator);
}
[TestMethod]
[PexGeneratedBy(typeof(CPPTranslatorTest))]
public void TranslateGeneratedCode55001()
{
    CPPTranslator cPPTranslator;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    Dictionary<string, object> dictionary;
    cPPTranslator = CPPTranslatorFactory.Create();
    varInteger = VarIntegerFactory.Create(false, 0);
    string[] ss = new string[1];
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    dictionary = this.TranslateGeneratedCode(cPPTranslator, generatedCode);
    Assert.IsNotNull((object)dictionary);
    Assert.IsNotNull(dictionary.Comparer);
    Assert.AreEqual<int>(4, dictionary.Count);
    Assert.IsNotNull((object)cPPTranslator);
}
[TestMethod]
[PexGeneratedBy(typeof(CPPTranslatorTest))]
public void TranslateGeneratedCode55002()
{
    CPPTranslator cPPTranslator;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    Dictionary<string, object> dictionary;
    cPPTranslator = CPPTranslatorFactory.Create();
    varInteger = VarIntegerFactory.Create(false, 0);
    string[] ss = new string[1];
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, ss);
    dictionary = this.TranslateGeneratedCode(cPPTranslator, generatedCode);
    Assert.IsNotNull((object)dictionary);
    Assert.IsNotNull(dictionary.Comparer);
    Assert.AreEqual<int>(4, dictionary.Count);
    Assert.IsNotNull((object)cPPTranslator);
}
[TestMethod]
[PexGeneratedBy(typeof(CPPTranslatorTest))]
public void TranslateGeneratedCode55003()
{
    CPPTranslator cPPTranslator;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    Dictionary<string, object> dictionary;
    cPPTranslator = CPPTranslatorFactory.Create();
    varInteger = VarIntegerFactory.Create(false, 1);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    dictionary = this.TranslateGeneratedCode(cPPTranslator, generatedCode);
    Assert.IsNotNull((object)dictionary);
    Assert.IsNotNull(dictionary.Comparer);
    Assert.AreEqual<int>(4, dictionary.Count);
    Assert.IsNotNull((object)cPPTranslator);
}
[TestMethod]
[PexGeneratedBy(typeof(CPPTranslatorTest))]
public void TranslateGeneratedCode55004()
{
    CPPTranslator cPPTranslator;
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    GeneratedCode generatedCode;
    Dictionary<string, object> dictionary;
    cPPTranslator = CPPTranslatorFactory.Create();
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    string[] ss = new string[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, iStatements, (string[])null, (NTObject[])null, ss);
    dictionary = this.TranslateGeneratedCode(cPPTranslator, generatedCode);
    Assert.IsNotNull((object)dictionary);
    Assert.IsNotNull(dictionary.Comparer);
    Assert.AreEqual<int>(4, dictionary.Count);
    Assert.IsNotNull((object)cPPTranslator);
}
[TestMethod]
[PexGeneratedBy(typeof(CPPTranslatorTest))]
public void TranslateGeneratedCode55005()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      CPPTranslator cPPTranslator;
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      Dictionary<string, object> dictionary;
      cPPTranslator = CPPTranslatorFactory.Create();
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      string[] ss = new string[3];
      NTObject[] nTObjects = new NTObject[1];
      ss[0] = "";
      ss[1] = "";
      nTObjects[0] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    ss, nTObjects, (string[])null);
      dictionary = this.TranslateGeneratedCode(cPPTranslator, generatedCode);
      disposables.Dispose();
      Assert.IsNotNull((object)dictionary);
      Assert.IsNotNull(dictionary.Comparer);
      Assert.AreEqual<int>(4, dictionary.Count);
      Assert.IsNotNull((object)cPPTranslator);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CPPTranslatorTest))]
public void TranslateGeneratedCode55006()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      CPPTranslator cPPTranslator;
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      Dictionary<string, object> dictionary;
      cPPTranslator = CPPTranslatorFactory.Create();
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      string[] ss = new string[3];
      NTObject[] nTObjects = new NTObject[2];
      ss[0] = "";
      ss[1] = "";
      nTObjects[0] = nTObject;
      nTObjects[1] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    ss, nTObjects, (string[])null);
      dictionary = this.TranslateGeneratedCode(cPPTranslator, generatedCode);
      disposables.Dispose();
      Assert.IsNotNull((object)dictionary);
      Assert.IsNotNull(dictionary.Comparer);
      Assert.AreEqual<int>(4, dictionary.Count);
      Assert.IsNotNull((object)cPPTranslator);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CPPTranslatorTest))]
public void TranslateGeneratedCode55007()
{
    CPPTranslator cPPTranslator;
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementInlineBlock statementInlineBlock;
    GeneratedCode generatedCode;
    Dictionary<string, object> dictionary;
    cPPTranslator = CPPTranslatorFactory.Create();
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    statementInlineBlock =
      StatementInlineBlockFactory.Create((IStatement[])null, (IVariable[])null);
    IStatement[] iStatements = new IStatement[2];
    iStatements[0] = (IStatement)statementIncrementInteger;
    iStatements[1] = (IStatement)statementInlineBlock;
    generatedCode = GeneratedCodeFactory.Create((IVariable)varInteger, iStatements, 
                                                (string[])null, (NTObject[])null, (string[])null);
    dictionary = this.TranslateGeneratedCode(cPPTranslator, generatedCode);
    Assert.IsNotNull((object)dictionary);
    Assert.IsNotNull(dictionary.Comparer);
    Assert.AreEqual<int>(4, dictionary.Count);
    Assert.IsNotNull((object)cPPTranslator);
}
    }
}
