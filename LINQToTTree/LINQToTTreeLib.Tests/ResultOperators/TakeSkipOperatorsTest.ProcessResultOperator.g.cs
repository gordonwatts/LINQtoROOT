using LINQToTTreeLib.Variables;
using LINQToTTreeLib;
using LinqToTTreeInterfacesLib;
using ROOTNET;
using Remotion.Linq.Clauses;
using Remotion.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
using LINQToTTreeLib.Statements;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib.ResultOperators
{
    public partial class TakeSkipOperatorsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException459()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IVariable iVariable;
    varInteger = VarIntegerFactory.Create(false, 0);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    ROTakeSkipOperators s0 = new ROTakeSkipOperators();
    iVariable = this.ProcessResultOperator
                    (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException388()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IVariable iVariable;
    varInteger = VarIntegerFactory.Create(false, 1);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    ROTakeSkipOperators s0 = new ROTakeSkipOperators();
    iVariable = this.ProcessResultOperator
                    (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException177()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IVariable iVariable;
    varInteger = VarIntegerFactory.Create(false, 0);
    string[] ss = new string[1];
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    ROTakeSkipOperators s0 = new ROTakeSkipOperators();
    iVariable = this.ProcessResultOperator
                    (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException263()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IVariable iVariable;
    varInteger = VarIntegerFactory.Create(false, 0);
    string[] ss = new string[1];
    ss[0] = "";
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    ROTakeSkipOperators s0 = new ROTakeSkipOperators();
    iVariable = this.ProcessResultOperator
                    (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException947()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IVariable iVariable;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    string[] ss = new string[1];
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, ss);
    ROTakeSkipOperators s0 = new ROTakeSkipOperators();
    iVariable = this.ProcessResultOperator
                    (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException465()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    GeneratedCode generatedCode;
    IVariable iVariable;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    generatedCode = GeneratedCodeFactory.Create((IVariable)varInteger, iStatements, 
                                                (string[])null, (NTObject[])null, (string[])null);
    ROTakeSkipOperators s0 = new ROTakeSkipOperators();
    iVariable = this.ProcessResultOperator
                    (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException536()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      IVariable iVariable;
      varInteger = VarIntegerFactory.Create(false, 0);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      NTObject[] nTObjects = new NTObject[1];
      nTObjects[0] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, (string[])null);
      ROTakeSkipOperators s0 = new ROTakeSkipOperators();
      iVariable = this.ProcessResultOperator
                      (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException122()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IVariable iVariable;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    string[] ss = new string[2];
    ss[0] = "";
    ss[1] = "";
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    ROTakeSkipOperators s0 = new ROTakeSkipOperators();
    iVariable = this.ProcessResultOperator
                    (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException498()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      IVariable iVariable;
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      string[] ss = new string[3];
      NTObject[] nTObjects = new NTObject[2];
      ss[0] = "";
      ss[1] = "";
      nTObjects[0] = nTObject;
      nTObjects[1] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    ss, nTObjects, (string[])null);
      ROTakeSkipOperators s0 = new ROTakeSkipOperators();
      iVariable = this.ProcessResultOperator
                      (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException706()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    GeneratedCode generatedCode;
    IVariable iVariable;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[0];
    IVariable[] iVariables = new IVariable[0];
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    IStatement[] iStatements1 = new IStatement[2];
    iStatements1[0] = (IStatement)statementIncrementInteger;
    iStatements1[1] = (IStatement)statementFilter;
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, iStatements1, 
                                  (string[])null, (NTObject[])null, (string[])null);
    ROTakeSkipOperators s0 = new ROTakeSkipOperators();
    iVariable = this.ProcessResultOperator
                    (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException13()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementFilter statementFilter;
    GeneratedCode generatedCode;
    IVariable iVariable;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[0];
    IVariable[] iVariables = new IVariable[1];
    iVariables[0] = (IVariable)varInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    IStatement[] iStatements1 = new IStatement[2];
    iStatements1[0] = (IStatement)statementIncrementInteger;
    iStatements1[1] = (IStatement)statementFilter;
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, iStatements1, 
                                  (string[])null, (NTObject[])null, (string[])null);
    ROTakeSkipOperators s0 = new ROTakeSkipOperators();
    iVariable = this.ProcessResultOperator
                    (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TakeSkipOperatorsTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessResultOperatorThrowsArgumentException779()
{
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    StatementIfOnCount statementIfOnCount;
    StatementFilter statementFilter;
    GeneratedCode generatedCode;
    IVariable iVariable;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    statementIfOnCount =
      StatementIfOnCountFactory.Create((IVariable)varInteger, (IValue)varInteger, 
                                       StatementIfOnCount.ComparisonOperator.GreaterThan, 
                                       (IStatement[])null, (IVariable[])null);
    IStatement[] iStatements = new IStatement[1];
    IVariable[] iVariables = new IVariable[1];
    iStatements[0] = (IStatement)statementIfOnCount;
    iVariables[0] = (IVariable)varInteger;
    statementFilter =
      StatementFilterFactory.Create((IValue)varInteger, iStatements, iVariables);
    IStatement[] iStatements1 = new IStatement[2];
    iStatements1[0] = (IStatement)statementIncrementInteger;
    iStatements1[1] = (IStatement)statementFilter;
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, iStatements1, 
                                  (string[])null, (NTObject[])null, (string[])null);
    ROTakeSkipOperators s0 = new ROTakeSkipOperators();
    iVariable = this.ProcessResultOperator
                    (s0, (ResultOperatorBase)null, (QueryModel)null, generatedCode);
}
    }
}
