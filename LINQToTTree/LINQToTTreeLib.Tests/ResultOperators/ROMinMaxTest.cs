using LinqToTTreeInterfacesLib;
using LINQToTTreeLib.Statements;
using LINQToTTreeLib.Tests;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.Validation;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Remotion.Linq;
using Remotion.Linq.Clauses;
// <copyright file="ROMinMaxTest.cs" company="Microsoft">Copyright © Microsoft 2010</copyright>
using System;
using System.ComponentModel.Composition.Hosting;
using System.Linq;
using System.Linq.Expressions;

namespace LINQToTTreeLib.ResultOperators
{
    /// <summary>This class contains parameterized unit tests for ROMinMax</summary>
    [PexClass(typeof(ROMinMax))]
    [PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException))]
    [PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes = true)]
    [TestClass]
    public partial class ROMinMaxTest
    {
        [TestInitialize]
        public void TestInit()
        {
            TestUtils.ResetLINQLibrary();
        }

        [TestCleanup]
        public void TestDone()
        {
            MEFUtilities.MyClassDone();
        }

        /// <summary>Test stub for CanHandle(Type)</summary>
        [PexMethod]
        internal bool CanHandle([PexAssumeUnderTest]ROMinMax target, Type resultOperatorType)
        {
            bool result = target.CanHandle(resultOperatorType);
            return result;
            // TODO: add assertions to method ROMinMaxTest.CanHandle(ROMinMax, Type)
        }

        /// <summary>Test stub for ProcessResultOperator(ResultOperatorBase, QueryModel, IGeneratedQueryCode, ICodeContext, CompositionContainer)</summary>
        [PexMethod]
        internal Expression ProcessResultOperator(
            [PexAssumeUnderTest]ROMinMax target,
            ResultOperatorBase resultOperator,
            QueryModel queryModel,
            IGeneratedQueryCode gc,
            ICodeContext cc,
            CompositionContainer container
        )
        {
            Expression result
               = target.ProcessResultOperator(resultOperator, queryModel, gc, cc, container);
            return result;
            // TODO: add assertions to method ROMinMaxTest.ProcessResultOperator(ROMinMax, ResultOperatorBase, QueryModel, IGeneratedQueryCode, ICodeContext, CompositionContainer)
        }

        [TestMethod]
        [ExpectedException(typeof(NotImplementedException))]
        public void TestMaxOfSimpleSequence()
        {
            /// You can't run a query at the top level
            /// The reason is techincal: have to add the infrastructure to save a bool var in the
            /// class instance w/out transfering it back out. Simple, but more work than really
            /// need right now.
            var q = new QueriableDummy<ntup>();
            var result = from d in q
                         select d.run;
            var c = result.Max();
        }

        public class ntup2
        {
            public int[] run;
        }
        [TestMethod]
        public void TestMaxVariableDeclaredCorrectly()
        {
            var q = new QueriableDummy<ntup2>();

            var result = from evt in q
                         where (from r in evt.run select r).Max() > 10
                         select evt;
            var c = result.Count();

            Assert.IsNotNull(DummyQueryExectuor.FinalResult, "Expecting some code to have been generated!");
            var res = DummyQueryExectuor.FinalResult;
            res.DumpCodeToConsole();

            //
            // Code body should have the init for the for loop boundary for loop generated by the (fromxxx) up there and the
            // if statement that tests for > 10.
            // 

            Assert.AreEqual(1, res.Functions.Count(), "# of functions");
            var code = res.Functions.First().StatementBlock;
            var minmax = code.FindStatement<StatementMinMaxTest>();
            Assert.IsNotNull(minmax, "Unable to find the minmax statements");
            var mmaxVar = minmax.MaxMinVariable;
            var declstatement = code.FindDeclarationStatement(mmaxVar);
            Assert.IsNotNull(declstatement, string.Format("Unable to find where {0} for minmax was declared!", mmaxVar.ToString()));
#if false
            var ifStatement = code.Statements.Skip(1).First() as Statements.StatementFilter;
            Assert.IsNotNull(ifStatement, "If statement wasn' of proper type!");

            var varname = ifStatement.TestExpression.RawValue.Split('>').First();
            varname = varname.Replace("(", "");
            varname = varname.Replace(")", "");

            // And that var name should also exist in the list of booked variables at this top level.

            var asBooked = res.CodeBody.DeclaredVariables.Where(v => v.ParameterName == varname).FirstOrDefault();
            Assert.IsNotNull(asBooked, string.Format("Unable to find variable '{0}' in the top level list of booked variables.", varname));
#endif
        }
    }
}
