// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using LINQToTTreeLib.Variables;
using LINQToTTreeLib.Statements;
using LinqToTTreeInterfacesLib.Moles;
using LINQToTTreeLib.Variables.Moles;
using LINQToTTreeLib.Statements.Moles;

namespace LINQToTTreeLib
{
    public partial class GeneratedCodeTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException972()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 0);
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, (IStatement[])null, (string[])null, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException663()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 1);
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, (IStatement[])null, (string[])null, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException591()
{
    SVarInteger sVarInteger;
    SStatementIncrementInteger sStatementIncrementInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    sStatementIncrementInteger =
      new SStatementIncrementInteger((VarInteger)sVarInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sStatementIncrementInteger;
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException997()
{
    SVarInteger sVarInteger;
    StatementIncrementInteger statementIncrementInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    statementIncrementInteger =
      StatementIncrementIntegerFactory.Create((VarInteger)sVarInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException670()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentException))]
public void TestAddTransferThrowsArgumentException904()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    object s0 = new object();
    this.TestAddTransfer(generatedCode, (string)null, s0);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException546()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    string[] ss = new string[1];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, ss, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentException))]
public void TestAddTransferThrowsArgumentException893()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    object s0 = new object();
    this.TestAddTransfer(generatedCode, "", s0);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
public void TestAddTransfer43901()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    object s0 = new object();
    this.TestAddTransfer(generatedCode, "\0", s0);
    Assert.IsNotNull((object)generatedCode);
    Assert.AreEqual<int>(1, generatedCode.Depth);
    Assert.IsNotNull(generatedCode.ResultValue);
    Assert.IsNotNull(generatedCode.CodeBody);
    Assert.IsNotNull(generatedCode.VariablesToTransfer);
    Assert.IsNotNull(generatedCode.IncludeFiles);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException190()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    string[] ss = new string[1];
    ss[0] = "\0";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException601()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[2];
    ss[0] = "\u0100";
    ss[1] = "\u0100";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException446()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[2];
    ss[0] = "\u0101";
    ss[1] = "\u0100";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException584()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[2];
    ss[0] = "\uceba";
    ss[1] = "\u4aaf";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException765()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[5];
    ss[0] = "\u0100";
    ss[1] = "\u0100";
    ss[2] = "\u0100";
    ss[3] = "\u0089";
    ss[4] = "\0\u0100";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException367()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[6];
    ss[0] = "\u0100";
    ss[1] = "\u0100";
    ss[2] = "\u0100";
    ss[3] = "\u0089";
    ss[4] = "\u0080\u0101";
    ss[5] = "\0\u0100";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException151()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[5];
    ss[0] = "\u0100";
    ss[1] = "\u0100";
    ss[2] = "\u0100";
    ss[3] = "\u0100";
    ss[4] = "\u0100\0";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
    }
}
