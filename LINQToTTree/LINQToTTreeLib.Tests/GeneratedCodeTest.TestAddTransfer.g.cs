using LINQToTTreeLib.Variables;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
using LINQToTTreeLib.Statements;
using Microsoft.ExtendedReflection.DataAccess;
using LINQToTTreeLib.Variables.Moles;
using LINQToTTreeLib.Statements.Moles;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib
{
    public partial class GeneratedCodeTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException245()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentException))]
public void TestAddTransferThrowsArgumentException154()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    object s0 = new object();
    this.TestAddTransfer(generatedCode, (string)null, s0);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException391()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    string[] ss = new string[1];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, ss, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentException))]
public void TestAddTransferThrowsArgumentException888()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    object s0 = new object();
    this.TestAddTransfer(generatedCode, "", s0);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
public void TestAddTransfer439()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    object s0 = new object();
    this.TestAddTransfer(generatedCode, "\0", s0);
    Assert.IsNotNull((object)generatedCode);
    Assert.AreEqual<int>(1, generatedCode.Depth);
    Assert.IsNotNull(generatedCode.ResultValue);
    Assert.IsNotNull(generatedCode.CodeBody);
    Assert.IsNotNull(generatedCode.VariablesToTransfer);
    Assert.IsNotNull(generatedCode.IncludeFiles);
    Assert.IsNotNull(generatedCode.ReferencedLeafNames);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException418()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    IStatement[] iStatements = new IStatement[0];
    string[] ss = new string[1];
    ss[0] = "\0";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException323()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 0);
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, (IStatement[])null, (string[])null, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException597()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 1);
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, (IStatement[])null, (string[])null, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException23()
{
    SVarInteger sVarInteger;
    SStatementIncrementInteger sStatementIncrementInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    sStatementIncrementInteger =
      new SStatementIncrementInteger((VarInteger)sVarInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)sStatementIncrementInteger;
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException72()
{
    SVarInteger sVarInteger;
    StatementIncrementInteger statementIncrementInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    statementIncrementInteger =
      StatementIncrementIntegerFactory.Create((VarInteger)sVarInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, iStatements, (string[])null, (string[])null);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException58()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[2];
    ss[0] = "\u0100";
    ss[1] = "\u0100";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException109()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[2];
    ss[0] = "\u0101";
    ss[1] = "\u0100";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException560()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[2];
    ss[0] = "\uce8e";
    ss[1] = "\u4aaf";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException455()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[3];
    ss[0] = "\u0100";
    ss[1] = "\u0100";
    ss[2] = "\u0100\0";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TestAddTransferThrowsArgumentNullException429()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[4];
    ss[0] = "\u0100";
    ss[1] = "\u0100";
    ss[2] = "\u0089";
    ss[3] = "\0\0\0\u0100\u0089";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    this.TestAddTransfer(generatedCode, (string)null, (object)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
public void TestAddTransfer52()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[5];
    ss[0] = "\ub5fe";
    ss[1] = "\ub5fe";
    ss[2] = "~";
    ss[3] = "\u0097\u0087+\u044d\u00e2\u0084";
    ss[4] = "\u0097\u0087+\u044d\u00e2\u0084";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    object s0 = new object();
    this.TestAddTransfer(generatedCode, "\ub5fe", s0);
    Assert.IsNotNull((object)generatedCode);
    Assert.AreEqual<int>(1, generatedCode.Depth);
    Assert.IsNotNull(generatedCode.ResultValue);
    Assert.IsNotNull(generatedCode.CodeBody);
    Assert.IsNotNull(generatedCode.VariablesToTransfer);
    Assert.IsNotNull(generatedCode.IncludeFiles);
    Assert.IsNotNull(generatedCode.ReferencedLeafNames);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
public void TestAddTransfer388()
{
    SVarInteger sVarInteger;
    GeneratedCode generatedCode;
    sVarInteger = new SVarInteger();
    string[] ss = new string[5];
    ss[0] = "\ub5ef";
    ss[1] = "\ub5ef";
    ss[2] = "\u00af";
    ss[3] = "F\u00b5$\uc6ea\u00e4\u00ad";
    ss[4] = "F\u00b5$\uc6ea\u00e4\u00ad";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)sVarInteger, (IStatement[])null, (string[])null, ss);
    int[] ints = new int[5];
    this.TestAddTransfer(generatedCode, "\uc5ae", (object)ints);
    Assert.IsNotNull((object)generatedCode);
    Assert.AreEqual<int>(1, generatedCode.Depth);
    Assert.IsNotNull(generatedCode.ResultValue);
    Assert.IsNotNull(generatedCode.CodeBody);
    Assert.IsNotNull(generatedCode.VariablesToTransfer);
    Assert.IsNotNull(generatedCode.IncludeFiles);
    Assert.IsNotNull(generatedCode.ReferencedLeafNames);
}
    }
}
