using LINQToTTreeLib.Variables;
using LinqToTTreeInterfacesLib;
using ROOTNET;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
using LINQToTTreeLib.Statements;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib
{
    public partial class GeneratedCodeTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void AddThrowsArgumentNullException455()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 0);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    this.Add(generatedCode, (IStatementCompound)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void AddThrowsArgumentNullException279()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 0);
    string[] ss = new string[1];
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, ss);
    this.Add(generatedCode, (IStatementCompound)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void AddThrowsArgumentNullException362()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    string[] ss = new string[1];
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    this.Add(generatedCode, (IStatementCompound)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void AddThrowsArgumentNullException575()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, 1);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    this.Add(generatedCode, (IStatementCompound)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void AddThrowsArgumentNullException706()
{
    VarInteger varInteger;
    GeneratedCode generatedCode;
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    string[] ss = new string[1];
    ss[0] = "";
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    this.Add(generatedCode, (IStatementCompound)null);
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void AddThrowsArgumentNullException7()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      NTObject[] nTObjects = new NTObject[1];
      nTObjects[0] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, (string[])null);
      this.Add(generatedCode, (IStatementCompound)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void AddThrowsArgumentNullException482()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      NTObject[] nTObjects = new NTObject[1];
      string[] ss = new string[2];
      nTObjects[0] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, ss);
      this.Add(generatedCode, (IStatementCompound)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void Add619()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      NTObject[] nTObjects = new NTObject[1];
      string[] ss = new string[3];
      nTObjects[0] = nTObject;
      ss[0] = "";
      ss[2] = "";
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, ss);
      StatementInlineBlock statementInlineBlock = new StatementInlineBlock();
      this.Add(generatedCode, (IStatementCompound)statementInlineBlock);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void AddThrowsArgumentNullException814()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      NTObject[] nTObjects = new NTObject[2];
      nTObjects[0] = nTObject;
      nTObjects[1] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, (string[])null);
      this.Add(generatedCode, (IStatementCompound)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GeneratedCodeTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void AddThrowsArgumentNullException345()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      VarInteger varInteger;
      NTObject nTObject;
      NTObject nTObject1;
      NTObject nTObject2;
      NTObject nTObject3;
      GeneratedCode generatedCode;
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      nTObject1 = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject1);
      nTObject2 = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject2);
      nTObject3 = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject3);
      NTObject[] nTObjects = new NTObject[6];
      nTObjects[0] = nTObject;
      nTObjects[1] = nTObject1;
      nTObjects[2] = nTObject1;
      nTObjects[3] = nTObject2;
      nTObjects[4] = nTObject3;
      nTObjects[5] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, (string[])null);
      this.Add(generatedCode, (IStatementCompound)null);
      disposables.Dispose();
    }
}
    }
}
