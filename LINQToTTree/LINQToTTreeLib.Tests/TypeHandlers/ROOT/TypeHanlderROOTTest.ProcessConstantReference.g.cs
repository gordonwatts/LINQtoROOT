using System.Linq.Expressions;
using LINQToTTreeLib.Variables;
using LINQToTTreeLib;
using LinqToTTreeInterfacesLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
using LINQToTTreeLib.Statements;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib.TypeHandlers.ROOT
{
    public partial class TypeHanlderROOTTest
    {
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException61()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, 0);
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, (IStatement[])null, (string[])null, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException552()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, 0);
    string[] ss = new string[1];
    ss[0] = "\0";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, (IStatement[])null, (string[])null, ss);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException112()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    string[] ss = new string[1];
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, (IStatement[])null, ss, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
public void ProcessConstantReference980()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(1);
    varInteger = VarIntegerFactory.Create(false, 0);
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, (IStatement[])null, (string[])null, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
    Assert.IsNotNull((object)iValue);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException266()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, 1);
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, (IStatement[])null, (string[])null, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException132()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    string[] ss = new string[2];
    ss[0] = "\u0100";
    ss[1] = "\u0100";
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, (IStatement[])null, (string[])null, ss);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException470()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, iStatements, (string[])null, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
    }
}
