using System.Linq.Expressions;
using LINQToTTreeLib.Variables;
using LINQToTTreeLib;
using LinqToTTreeInterfacesLib;
using ROOTNET;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System;
using LINQToTTreeLib.Statements;
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

namespace LINQToTTreeLib.TypeHandlers.ROOT
{
    public partial class TypeHanlderROOTTest
    {
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException30()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, 0);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException778()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, 1);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException570()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    string[] ss = new string[1];
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException968()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, 0);
    string[] ss = new string[1];
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, ss);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException314()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    string[] ss = new string[1];
    ss[0] = "";
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
public void ProcessConstantReference980()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(1);
    varInteger = VarIntegerFactory.Create(false, 0);
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  (string[])null, (NTObject[])null, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
    Assert.IsNotNull((object)iValue);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException685()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(0);
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    string[] ss = new string[2];
    ss[0] = "";
    ss[1] = "";
    generatedCode =
      GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                  ss, (NTObject[])null, (string[])null);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException17()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      ConstantExpression constantExpression;
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      IValue iValue;
      constantExpression = ConstantExpressionFactory.Create(0);
      varInteger = VarIntegerFactory.Create(false, 0);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      NTObject[] nTObjects = new NTObject[1];
      string[] ss = new string[1];
      nTObjects[0] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, ss);
      TypeHandlerROOT s0 = new TypeHandlerROOT();
      iValue = this.ProcessConstantReference
                   (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
public void ProcessConstantReference98001()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      ConstantExpression constantExpression;
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      IValue iValue;
      constantExpression = ConstantExpressionFactory.Create(1);
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      NTObject[] nTObjects = new NTObject[1];
      string[] ss = new string[1];
      nTObjects[0] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, ss);
      TypeHandlerROOT s0 = new TypeHandlerROOT();
      iValue = this.ProcessConstantReference
                   (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
      disposables.Dispose();
      Assert.IsNotNull((object)iValue);
      Assert.IsNotNull((object)s0);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
public void ProcessConstantReference98002()
{
    ConstantExpression constantExpression;
    VarInteger varInteger;
    StatementIncrementInteger statementIncrementInteger;
    GeneratedCode generatedCode;
    IValue iValue;
    constantExpression = ConstantExpressionFactory.Create(1);
    varInteger = VarIntegerFactory.Create(false, int.MaxValue);
    statementIncrementInteger = StatementIncrementIntegerFactory.Create(varInteger);
    IStatement[] iStatements = new IStatement[1];
    string[] ss = new string[1];
    NTObject[] nTObjects = new NTObject[0];
    string[] ss1 = new string[1];
    iStatements[0] = (IStatement)statementIncrementInteger;
    generatedCode = GeneratedCodeFactory.Create
                        ((IVariable)varInteger, iStatements, ss, nTObjects, ss1);
    TypeHandlerROOT s0 = new TypeHandlerROOT();
    iValue = this.ProcessConstantReference
                 (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
    Assert.IsNotNull((object)iValue);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHanlderROOTTest))]
[ExpectedException(typeof(ArgumentException))]
public void ProcessConstantReferenceThrowsArgumentException5()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      ConstantExpression constantExpression;
      VarInteger varInteger;
      NTObject nTObject;
      GeneratedCode generatedCode;
      IValue iValue;
      constantExpression = ConstantExpressionFactory.Create(0);
      varInteger = VarIntegerFactory.Create(false, int.MaxValue);
      nTObject = NTObjectFactory.Create();
      disposables.Add((IDisposable)nTObject);
      NTObject[] nTObjects = new NTObject[2];
      string[] ss = new string[2];
      nTObjects[0] = nTObject;
      nTObjects[1] = nTObject;
      generatedCode =
        GeneratedCodeFactory.Create((IVariable)varInteger, (IStatement[])null, 
                                    (string[])null, nTObjects, ss);
      TypeHandlerROOT s0 = new TypeHandlerROOT();
      iValue = this.ProcessConstantReference
                   (s0, constantExpression, (IGeneratedQueryCode)generatedCode);
      disposables.Dispose();
    }
}
    }
}
