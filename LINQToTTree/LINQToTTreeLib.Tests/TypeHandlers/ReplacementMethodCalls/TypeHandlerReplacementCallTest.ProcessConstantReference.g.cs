// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Framework.Generated;
using System.IO;
using LinqToTTreeInterfacesLib;
using System.Linq.Expressions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace LINQToTTreeLib.TypeHandlers.ReplacementMethodCalls
{
    public partial class TypeHandlerReplacementCallTest
    {
[TestMethod]
[PexGeneratedBy(typeof(TypeHandlerReplacementCallTest))]
[PexRaisedException(typeof(NotImplementedException))]
public void ProcessConstantReferenceThrowsNotImplementedException467()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      StringReader stringReader;
      TypeHandlerReplacementCall typeHandlerReplacementCall;
      IValue iValue;
      stringReader = new StringReader("");
      disposables.Add((IDisposable)stringReader);
      typeHandlerReplacementCall = new TypeHandlerReplacementCall();
      typeHandlerReplacementCall.Parse((TextReader)stringReader);
      iValue = this.ProcessConstantReference(typeHandlerReplacementCall, 
                                             (ConstantExpression)null, (IGeneratedCode)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHandlerReplacementCallTest))]
[PexRaisedException(typeof(NotImplementedException))]
public void ProcessConstantReferenceThrowsNotImplementedException737()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      StringReader stringReader;
      TypeHandlerReplacementCall typeHandlerReplacementCall;
      IValue iValue;
      stringReader = new StringReader("\r");
      disposables.Add((IDisposable)stringReader);
      typeHandlerReplacementCall = new TypeHandlerReplacementCall();
      typeHandlerReplacementCall.Parse((TextReader)stringReader);
      iValue = this.ProcessConstantReference(typeHandlerReplacementCall, 
                                             (ConstantExpression)null, (IGeneratedCode)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHandlerReplacementCallTest))]
[PexRaisedException(typeof(NotImplementedException))]
public void ProcessConstantReferenceThrowsNotImplementedException849()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      StringReader stringReader;
      TypeHandlerReplacementCall typeHandlerReplacementCall;
      IValue iValue;
      stringReader = new StringReader("\t");
      disposables.Add((IDisposable)stringReader);
      typeHandlerReplacementCall = new TypeHandlerReplacementCall();
      typeHandlerReplacementCall.Parse((TextReader)stringReader);
      iValue = this.ProcessConstantReference(typeHandlerReplacementCall, 
                                             (ConstantExpression)null, (IGeneratedCode)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHandlerReplacementCallTest))]
[PexRaisedException(typeof(NotImplementedException))]
public void ProcessConstantReferenceThrowsNotImplementedException84()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      StringReader stringReader;
      TypeHandlerReplacementCall typeHandlerReplacementCall;
      IValue iValue;
      stringReader = new StringReader("include:");
      disposables.Add((IDisposable)stringReader);
      typeHandlerReplacementCall = new TypeHandlerReplacementCall();
      typeHandlerReplacementCall.Parse((TextReader)stringReader);
      iValue = this.ProcessConstantReference(typeHandlerReplacementCall, 
                                             (ConstantExpression)null, (IGeneratedCode)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHandlerReplacementCallTest))]
[PexRaisedException(typeof(NotImplementedException))]
public void ProcessConstantReferenceThrowsNotImplementedException503()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      StringReader stringReader;
      TypeHandlerReplacementCall typeHandlerReplacementCall;
      IValue iValue;
      stringReader = new StringReader("include:\u0001\u0001\u0001\u0001");
      disposables.Add((IDisposable)stringReader);
      typeHandlerReplacementCall = new TypeHandlerReplacementCall();
      typeHandlerReplacementCall.Parse((TextReader)stringReader);
      iValue = this.ProcessConstantReference(typeHandlerReplacementCall, 
                                             (ConstantExpression)null, (IGeneratedCode)null);
      disposables.Dispose();
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TypeHandlerReplacementCallTest))]
[PexRaisedException(typeof(NotImplementedException))]
public void ProcessConstantReferenceThrowsNotImplementedException956()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      StringReader stringReader;
      TypeHandlerReplacementCall typeHandlerReplacementCall;
      IValue iValue;
      stringReader = new StringReader("include: \0\0\0");
      disposables.Add((IDisposable)stringReader);
      typeHandlerReplacementCall = new TypeHandlerReplacementCall();
      typeHandlerReplacementCall.Parse((TextReader)stringReader);
      iValue = this.ProcessConstantReference(typeHandlerReplacementCall, 
                                             (ConstantExpression)null, (IGeneratedCode)null);
      disposables.Dispose();
    }
}
    }
}
